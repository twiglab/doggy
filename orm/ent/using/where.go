// Code generated by ent, DO NOT EDIT.

package using

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/doggy/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldUpdateTime, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldSn, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldUUID, v))
}

// Alg applies equality check predicate on the "alg" field. It's identical to AlgEQ.
func Alg(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldAlg, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldName, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldUpdateTime, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Using {
	return predicate.Using(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Using {
	return predicate.Using(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Using {
	return predicate.Using(sql.FieldContainsFold(FieldSn, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Using {
	return predicate.Using(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Using {
	return predicate.Using(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Using {
	return predicate.Using(sql.FieldContainsFold(FieldUUID, v))
}

// AlgEQ applies the EQ predicate on the "alg" field.
func AlgEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldAlg, v))
}

// AlgNEQ applies the NEQ predicate on the "alg" field.
func AlgNEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldAlg, v))
}

// AlgIn applies the In predicate on the "alg" field.
func AlgIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldAlg, vs...))
}

// AlgNotIn applies the NotIn predicate on the "alg" field.
func AlgNotIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldAlg, vs...))
}

// AlgGT applies the GT predicate on the "alg" field.
func AlgGT(v string) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldAlg, v))
}

// AlgGTE applies the GTE predicate on the "alg" field.
func AlgGTE(v string) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldAlg, v))
}

// AlgLT applies the LT predicate on the "alg" field.
func AlgLT(v string) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldAlg, v))
}

// AlgLTE applies the LTE predicate on the "alg" field.
func AlgLTE(v string) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldAlg, v))
}

// AlgContains applies the Contains predicate on the "alg" field.
func AlgContains(v string) predicate.Using {
	return predicate.Using(sql.FieldContains(FieldAlg, v))
}

// AlgHasPrefix applies the HasPrefix predicate on the "alg" field.
func AlgHasPrefix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasPrefix(FieldAlg, v))
}

// AlgHasSuffix applies the HasSuffix predicate on the "alg" field.
func AlgHasSuffix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasSuffix(FieldAlg, v))
}

// AlgEqualFold applies the EqualFold predicate on the "alg" field.
func AlgEqualFold(v string) predicate.Using {
	return predicate.Using(sql.FieldEqualFold(FieldAlg, v))
}

// AlgContainsFold applies the ContainsFold predicate on the "alg" field.
func AlgContainsFold(v string) predicate.Using {
	return predicate.Using(sql.FieldContainsFold(FieldAlg, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Using {
	return predicate.Using(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Using {
	return predicate.Using(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Using {
	return predicate.Using(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Using {
	return predicate.Using(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Using {
	return predicate.Using(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Using {
	return predicate.Using(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Using {
	return predicate.Using(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Using {
	return predicate.Using(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Using {
	return predicate.Using(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Using {
	return predicate.Using(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Using {
	return predicate.Using(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Using {
	return predicate.Using(sql.FieldContainsFold(FieldName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Using) predicate.Using {
	return predicate.Using(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Using) predicate.Using {
	return predicate.Using(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Using) predicate.Using {
	return predicate.Using(sql.NotPredicates(p))
}
