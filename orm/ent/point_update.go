// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/point"
	"github.com/twiglab/doggy/orm/ent/predicate"
)

// PointUpdate is the builder for updating Point entities.
type PointUpdate struct {
	config
	hooks    []Hook
	mutation *PointMutation
}

// Where appends a list predicates to the PointUpdate builder.
func (pu *PointUpdate) Where(ps ...predicate.Point) *PointUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PointUpdate) SetUpdateTime(t time.Time) *PointUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetFloor sets the "floor" field.
func (pu *PointUpdate) SetFloor(s string) *PointUpdate {
	pu.mutation.SetFloor(s)
	return pu
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (pu *PointUpdate) SetNillableFloor(s *string) *PointUpdate {
	if s != nil {
		pu.SetFloor(*s)
	}
	return pu
}

// ClearFloor clears the value of the "floor" field.
func (pu *PointUpdate) ClearFloor() *PointUpdate {
	pu.mutation.ClearFloor()
	return pu
}

// SetBuilding sets the "building" field.
func (pu *PointUpdate) SetBuilding(s string) *PointUpdate {
	pu.mutation.SetBuilding(s)
	return pu
}

// SetNillableBuilding sets the "building" field if the given value is not nil.
func (pu *PointUpdate) SetNillableBuilding(s *string) *PointUpdate {
	if s != nil {
		pu.SetBuilding(*s)
	}
	return pu
}

// ClearBuilding clears the value of the "building" field.
func (pu *PointUpdate) ClearBuilding() *PointUpdate {
	pu.mutation.ClearBuilding()
	return pu
}

// SetArea sets the "area" field.
func (pu *PointUpdate) SetArea(s string) *PointUpdate {
	pu.mutation.SetArea(s)
	return pu
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (pu *PointUpdate) SetNillableArea(s *string) *PointUpdate {
	if s != nil {
		pu.SetArea(*s)
	}
	return pu
}

// ClearArea clears the value of the "area" field.
func (pu *PointUpdate) ClearArea() *PointUpdate {
	pu.mutation.ClearArea()
	return pu
}

// Mutation returns the PointMutation object of the builder.
func (pu *PointUpdate) Mutation() *PointMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PointUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PointUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PointUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PointUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PointUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := point.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PointUpdate) check() error {
	if v, ok := pu.mutation.Floor(); ok {
		if err := point.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf(`ent: validator failed for field "Point.floor": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Building(); ok {
		if err := point.BuildingValidator(v); err != nil {
			return &ValidationError{Name: "building", err: fmt.Errorf(`ent: validator failed for field "Point.building": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Area(); ok {
		if err := point.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Point.area": %w`, err)}
		}
	}
	return nil
}

func (pu *PointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(point.Table, point.Columns, sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(point.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Floor(); ok {
		_spec.SetField(point.FieldFloor, field.TypeString, value)
	}
	if pu.mutation.FloorCleared() {
		_spec.ClearField(point.FieldFloor, field.TypeString)
	}
	if value, ok := pu.mutation.Building(); ok {
		_spec.SetField(point.FieldBuilding, field.TypeString, value)
	}
	if pu.mutation.BuildingCleared() {
		_spec.ClearField(point.FieldBuilding, field.TypeString)
	}
	if value, ok := pu.mutation.Area(); ok {
		_spec.SetField(point.FieldArea, field.TypeString, value)
	}
	if pu.mutation.AreaCleared() {
		_spec.ClearField(point.FieldArea, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{point.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PointUpdateOne is the builder for updating a single Point entity.
type PointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PointMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PointUpdateOne) SetUpdateTime(t time.Time) *PointUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetFloor sets the "floor" field.
func (puo *PointUpdateOne) SetFloor(s string) *PointUpdateOne {
	puo.mutation.SetFloor(s)
	return puo
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillableFloor(s *string) *PointUpdateOne {
	if s != nil {
		puo.SetFloor(*s)
	}
	return puo
}

// ClearFloor clears the value of the "floor" field.
func (puo *PointUpdateOne) ClearFloor() *PointUpdateOne {
	puo.mutation.ClearFloor()
	return puo
}

// SetBuilding sets the "building" field.
func (puo *PointUpdateOne) SetBuilding(s string) *PointUpdateOne {
	puo.mutation.SetBuilding(s)
	return puo
}

// SetNillableBuilding sets the "building" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillableBuilding(s *string) *PointUpdateOne {
	if s != nil {
		puo.SetBuilding(*s)
	}
	return puo
}

// ClearBuilding clears the value of the "building" field.
func (puo *PointUpdateOne) ClearBuilding() *PointUpdateOne {
	puo.mutation.ClearBuilding()
	return puo
}

// SetArea sets the "area" field.
func (puo *PointUpdateOne) SetArea(s string) *PointUpdateOne {
	puo.mutation.SetArea(s)
	return puo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (puo *PointUpdateOne) SetNillableArea(s *string) *PointUpdateOne {
	if s != nil {
		puo.SetArea(*s)
	}
	return puo
}

// ClearArea clears the value of the "area" field.
func (puo *PointUpdateOne) ClearArea() *PointUpdateOne {
	puo.mutation.ClearArea()
	return puo
}

// Mutation returns the PointMutation object of the builder.
func (puo *PointUpdateOne) Mutation() *PointMutation {
	return puo.mutation
}

// Where appends a list predicates to the PointUpdate builder.
func (puo *PointUpdateOne) Where(ps ...predicate.Point) *PointUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PointUpdateOne) Select(field string, fields ...string) *PointUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Point entity.
func (puo *PointUpdateOne) Save(ctx context.Context) (*Point, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PointUpdateOne) SaveX(ctx context.Context) *Point {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PointUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PointUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PointUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := point.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PointUpdateOne) check() error {
	if v, ok := puo.mutation.Floor(); ok {
		if err := point.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf(`ent: validator failed for field "Point.floor": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Building(); ok {
		if err := point.BuildingValidator(v); err != nil {
			return &ValidationError{Name: "building", err: fmt.Errorf(`ent: validator failed for field "Point.building": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Area(); ok {
		if err := point.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Point.area": %w`, err)}
		}
	}
	return nil
}

func (puo *PointUpdateOne) sqlSave(ctx context.Context) (_node *Point, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(point.Table, point.Columns, sqlgraph.NewFieldSpec(point.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Point.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, point.FieldID)
		for _, f := range fields {
			if !point.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != point.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(point.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Floor(); ok {
		_spec.SetField(point.FieldFloor, field.TypeString, value)
	}
	if puo.mutation.FloorCleared() {
		_spec.ClearField(point.FieldFloor, field.TypeString)
	}
	if value, ok := puo.mutation.Building(); ok {
		_spec.SetField(point.FieldBuilding, field.TypeString, value)
	}
	if puo.mutation.BuildingCleared() {
		_spec.ClearField(point.FieldBuilding, field.TypeString)
	}
	if value, ok := puo.mutation.Area(); ok {
		_spec.SetField(point.FieldArea, field.TypeString, value)
	}
	if puo.mutation.AreaCleared() {
		_spec.ClearField(point.FieldArea, field.TypeString)
	}
	_node = &Point{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{point.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
