// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/setup"
)

// SetupCreate is the builder for creating a Setup entity.
type SetupCreate struct {
	config
	mutation *SetupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (sc *SetupCreate) SetCreateTime(t time.Time) *SetupCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SetupCreate) SetNillableCreateTime(t *time.Time) *SetupCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SetupCreate) SetUpdateTime(t time.Time) *SetupCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SetupCreate) SetNillableUpdateTime(t *time.Time) *SetupCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetSn sets the "sn" field.
func (sc *SetupCreate) SetSn(s string) *SetupCreate {
	sc.mutation.SetSn(s)
	return sc
}

// SetIP sets the "ip" field.
func (sc *SetupCreate) SetIP(s string) *SetupCreate {
	sc.mutation.SetIP(s)
	return sc
}

// SetLastTime sets the "last_time" field.
func (sc *SetupCreate) SetLastTime(t time.Time) *SetupCreate {
	sc.mutation.SetLastTime(t)
	return sc
}

// SetNillableLastTime sets the "last_time" field if the given value is not nil.
func (sc *SetupCreate) SetNillableLastTime(t *time.Time) *SetupCreate {
	if t != nil {
		sc.SetLastTime(*t)
	}
	return sc
}

// SetUser sets the "user" field.
func (sc *SetupCreate) SetUser(s string) *SetupCreate {
	sc.mutation.SetUser(s)
	return sc
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (sc *SetupCreate) SetNillableUser(s *string) *SetupCreate {
	if s != nil {
		sc.SetUser(*s)
	}
	return sc
}

// SetPwd sets the "pwd" field.
func (sc *SetupCreate) SetPwd(s string) *SetupCreate {
	sc.mutation.SetPwd(s)
	return sc
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (sc *SetupCreate) SetNillablePwd(s *string) *SetupCreate {
	if s != nil {
		sc.SetPwd(*s)
	}
	return sc
}

// SetUuid1 sets the "uuid1" field.
func (sc *SetupCreate) SetUuid1(s string) *SetupCreate {
	sc.mutation.SetUuid1(s)
	return sc
}

// SetUuid2 sets the "uuid2" field.
func (sc *SetupCreate) SetUuid2(s string) *SetupCreate {
	sc.mutation.SetUuid2(s)
	return sc
}

// Mutation returns the SetupMutation object of the builder.
func (sc *SetupCreate) Mutation() *SetupMutation {
	return sc.mutation
}

// Save creates the Setup in the database.
func (sc *SetupCreate) Save(ctx context.Context) (*Setup, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SetupCreate) SaveX(ctx context.Context) *Setup {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SetupCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SetupCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SetupCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := setup.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := setup.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.LastTime(); !ok {
		v := setup.DefaultLastTime()
		sc.mutation.SetLastTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SetupCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Setup.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Setup.update_time"`)}
	}
	if _, ok := sc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Setup.sn"`)}
	}
	if v, ok := sc.mutation.Sn(); ok {
		if err := setup.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Setup.sn": %w`, err)}
		}
	}
	if _, ok := sc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Setup.ip"`)}
	}
	if v, ok := sc.mutation.IP(); ok {
		if err := setup.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Setup.ip": %w`, err)}
		}
	}
	if _, ok := sc.mutation.LastTime(); !ok {
		return &ValidationError{Name: "last_time", err: errors.New(`ent: missing required field "Setup.last_time"`)}
	}
	if v, ok := sc.mutation.User(); ok {
		if err := setup.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Setup.user": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Pwd(); ok {
		if err := setup.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "Setup.pwd": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Uuid1(); !ok {
		return &ValidationError{Name: "uuid1", err: errors.New(`ent: missing required field "Setup.uuid1"`)}
	}
	if v, ok := sc.mutation.Uuid1(); ok {
		if err := setup.Uuid1Validator(v); err != nil {
			return &ValidationError{Name: "uuid1", err: fmt.Errorf(`ent: validator failed for field "Setup.uuid1": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Uuid2(); !ok {
		return &ValidationError{Name: "uuid2", err: errors.New(`ent: missing required field "Setup.uuid2"`)}
	}
	if v, ok := sc.mutation.Uuid2(); ok {
		if err := setup.Uuid2Validator(v); err != nil {
			return &ValidationError{Name: "uuid2", err: fmt.Errorf(`ent: validator failed for field "Setup.uuid2": %w`, err)}
		}
	}
	return nil
}

func (sc *SetupCreate) sqlSave(ctx context.Context) (*Setup, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SetupCreate) createSpec() (*Setup, *sqlgraph.CreateSpec) {
	var (
		_node = &Setup{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(setup.Table, sqlgraph.NewFieldSpec(setup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(setup.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(setup.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.Sn(); ok {
		_spec.SetField(setup.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := sc.mutation.IP(); ok {
		_spec.SetField(setup.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := sc.mutation.LastTime(); ok {
		_spec.SetField(setup.FieldLastTime, field.TypeTime, value)
		_node.LastTime = value
	}
	if value, ok := sc.mutation.User(); ok {
		_spec.SetField(setup.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := sc.mutation.Pwd(); ok {
		_spec.SetField(setup.FieldPwd, field.TypeString, value)
		_node.Pwd = value
	}
	if value, ok := sc.mutation.Uuid1(); ok {
		_spec.SetField(setup.FieldUuid1, field.TypeString, value)
		_node.Uuid1 = value
	}
	if value, ok := sc.mutation.Uuid2(); ok {
		_spec.SetField(setup.FieldUuid2, field.TypeString, value)
		_node.Uuid2 = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setup.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SetupUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (sc *SetupCreate) OnConflict(opts ...sql.ConflictOption) *SetupUpsertOne {
	sc.conflict = opts
	return &SetupUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SetupCreate) OnConflictColumns(columns ...string) *SetupUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SetupUpsertOne{
		create: sc,
	}
}

type (
	// SetupUpsertOne is the builder for "upsert"-ing
	//  one Setup node.
	SetupUpsertOne struct {
		create *SetupCreate
	}

	// SetupUpsert is the "OnConflict" setter.
	SetupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *SetupUpsert) SetUpdateTime(v time.Time) *SetupUpsert {
	u.Set(setup.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SetupUpsert) UpdateUpdateTime() *SetupUpsert {
	u.SetExcluded(setup.FieldUpdateTime)
	return u
}

// SetIP sets the "ip" field.
func (u *SetupUpsert) SetIP(v string) *SetupUpsert {
	u.Set(setup.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SetupUpsert) UpdateIP() *SetupUpsert {
	u.SetExcluded(setup.FieldIP)
	return u
}

// SetLastTime sets the "last_time" field.
func (u *SetupUpsert) SetLastTime(v time.Time) *SetupUpsert {
	u.Set(setup.FieldLastTime, v)
	return u
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *SetupUpsert) UpdateLastTime() *SetupUpsert {
	u.SetExcluded(setup.FieldLastTime)
	return u
}

// SetUser sets the "user" field.
func (u *SetupUpsert) SetUser(v string) *SetupUpsert {
	u.Set(setup.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SetupUpsert) UpdateUser() *SetupUpsert {
	u.SetExcluded(setup.FieldUser)
	return u
}

// ClearUser clears the value of the "user" field.
func (u *SetupUpsert) ClearUser() *SetupUpsert {
	u.SetNull(setup.FieldUser)
	return u
}

// SetPwd sets the "pwd" field.
func (u *SetupUpsert) SetPwd(v string) *SetupUpsert {
	u.Set(setup.FieldPwd, v)
	return u
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *SetupUpsert) UpdatePwd() *SetupUpsert {
	u.SetExcluded(setup.FieldPwd)
	return u
}

// ClearPwd clears the value of the "pwd" field.
func (u *SetupUpsert) ClearPwd() *SetupUpsert {
	u.SetNull(setup.FieldPwd)
	return u
}

// SetUuid1 sets the "uuid1" field.
func (u *SetupUpsert) SetUuid1(v string) *SetupUpsert {
	u.Set(setup.FieldUuid1, v)
	return u
}

// UpdateUuid1 sets the "uuid1" field to the value that was provided on create.
func (u *SetupUpsert) UpdateUuid1() *SetupUpsert {
	u.SetExcluded(setup.FieldUuid1)
	return u
}

// SetUuid2 sets the "uuid2" field.
func (u *SetupUpsert) SetUuid2(v string) *SetupUpsert {
	u.Set(setup.FieldUuid2, v)
	return u
}

// UpdateUuid2 sets the "uuid2" field to the value that was provided on create.
func (u *SetupUpsert) UpdateUuid2() *SetupUpsert {
	u.SetExcluded(setup.FieldUuid2)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Setup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SetupUpsertOne) UpdateNewValues() *SetupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(setup.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(setup.FieldSn)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SetupUpsertOne) Ignore() *SetupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SetupUpsertOne) DoNothing() *SetupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SetupCreate.OnConflict
// documentation for more info.
func (u *SetupUpsertOne) Update(set func(*SetupUpsert)) *SetupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SetupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SetupUpsertOne) SetUpdateTime(v time.Time) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateUpdateTime() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *SetupUpsertOne) SetIP(v string) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateIP() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateIP()
	})
}

// SetLastTime sets the "last_time" field.
func (u *SetupUpsertOne) SetLastTime(v time.Time) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateLastTime() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateLastTime()
	})
}

// SetUser sets the "user" field.
func (u *SetupUpsertOne) SetUser(v string) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateUser() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUser()
	})
}

// ClearUser clears the value of the "user" field.
func (u *SetupUpsertOne) ClearUser() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.ClearUser()
	})
}

// SetPwd sets the "pwd" field.
func (u *SetupUpsertOne) SetPwd(v string) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdatePwd() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdatePwd()
	})
}

// ClearPwd clears the value of the "pwd" field.
func (u *SetupUpsertOne) ClearPwd() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.ClearPwd()
	})
}

// SetUuid1 sets the "uuid1" field.
func (u *SetupUpsertOne) SetUuid1(v string) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetUuid1(v)
	})
}

// UpdateUuid1 sets the "uuid1" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateUuid1() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUuid1()
	})
}

// SetUuid2 sets the "uuid2" field.
func (u *SetupUpsertOne) SetUuid2(v string) *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.SetUuid2(v)
	})
}

// UpdateUuid2 sets the "uuid2" field to the value that was provided on create.
func (u *SetupUpsertOne) UpdateUuid2() *SetupUpsertOne {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUuid2()
	})
}

// Exec executes the query.
func (u *SetupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SetupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SetupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SetupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SetupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SetupCreateBulk is the builder for creating many Setup entities in bulk.
type SetupCreateBulk struct {
	config
	err      error
	builders []*SetupCreate
	conflict []sql.ConflictOption
}

// Save creates the Setup entities in the database.
func (scb *SetupCreateBulk) Save(ctx context.Context) ([]*Setup, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Setup, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SetupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SetupCreateBulk) SaveX(ctx context.Context) []*Setup {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SetupCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SetupCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Setup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SetupUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (scb *SetupCreateBulk) OnConflict(opts ...sql.ConflictOption) *SetupUpsertBulk {
	scb.conflict = opts
	return &SetupUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Setup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SetupCreateBulk) OnConflictColumns(columns ...string) *SetupUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SetupUpsertBulk{
		create: scb,
	}
}

// SetupUpsertBulk is the builder for "upsert"-ing
// a bulk of Setup nodes.
type SetupUpsertBulk struct {
	create *SetupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Setup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SetupUpsertBulk) UpdateNewValues() *SetupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(setup.FieldCreateTime)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(setup.FieldSn)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Setup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SetupUpsertBulk) Ignore() *SetupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SetupUpsertBulk) DoNothing() *SetupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SetupCreateBulk.OnConflict
// documentation for more info.
func (u *SetupUpsertBulk) Update(set func(*SetupUpsert)) *SetupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SetupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *SetupUpsertBulk) SetUpdateTime(v time.Time) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateUpdateTime() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *SetupUpsertBulk) SetIP(v string) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateIP() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateIP()
	})
}

// SetLastTime sets the "last_time" field.
func (u *SetupUpsertBulk) SetLastTime(v time.Time) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateLastTime() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateLastTime()
	})
}

// SetUser sets the "user" field.
func (u *SetupUpsertBulk) SetUser(v string) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateUser() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUser()
	})
}

// ClearUser clears the value of the "user" field.
func (u *SetupUpsertBulk) ClearUser() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.ClearUser()
	})
}

// SetPwd sets the "pwd" field.
func (u *SetupUpsertBulk) SetPwd(v string) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdatePwd() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdatePwd()
	})
}

// ClearPwd clears the value of the "pwd" field.
func (u *SetupUpsertBulk) ClearPwd() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.ClearPwd()
	})
}

// SetUuid1 sets the "uuid1" field.
func (u *SetupUpsertBulk) SetUuid1(v string) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetUuid1(v)
	})
}

// UpdateUuid1 sets the "uuid1" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateUuid1() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUuid1()
	})
}

// SetUuid2 sets the "uuid2" field.
func (u *SetupUpsertBulk) SetUuid2(v string) *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.SetUuid2(v)
	})
}

// UpdateUuid2 sets the "uuid2" field to the value that was provided on create.
func (u *SetupUpsertBulk) UpdateUuid2() *SetupUpsertBulk {
	return u.Update(func(s *SetupUpsert) {
		s.UpdateUuid2()
	})
}

// Exec executes the query.
func (u *SetupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SetupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SetupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SetupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
