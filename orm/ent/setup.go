// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/doggy/orm/ent/setup"
)

// Setup is the model entity for the Setup schema.
type Setup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// LastTime holds the value of the "last_time" field.
	LastTime time.Time `json:"last_time,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Pwd holds the value of the "pwd" field.
	Pwd string `json:"pwd,omitempty"`
	// Uuid1 holds the value of the "uuid1" field.
	Uuid1 string `json:"uuid1,omitempty"`
	// Uuid2 holds the value of the "uuid2" field.
	Uuid2        string `json:"uuid2,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Setup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case setup.FieldID:
			values[i] = new(sql.NullInt64)
		case setup.FieldSn, setup.FieldIP, setup.FieldUser, setup.FieldPwd, setup.FieldUuid1, setup.FieldUuid2:
			values[i] = new(sql.NullString)
		case setup.FieldCreateTime, setup.FieldUpdateTime, setup.FieldLastTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Setup fields.
func (s *Setup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case setup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case setup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case setup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case setup.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				s.Sn = value.String
			}
		case setup.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case setup.FieldLastTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_time", values[i])
			} else if value.Valid {
				s.LastTime = value.Time
			}
		case setup.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				s.User = value.String
			}
		case setup.FieldPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd", values[i])
			} else if value.Valid {
				s.Pwd = value.String
			}
		case setup.FieldUuid1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid1", values[i])
			} else if value.Valid {
				s.Uuid1 = value.String
			}
		case setup.FieldUuid2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid2", values[i])
			} else if value.Valid {
				s.Uuid2 = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Setup.
// This includes values selected through modifiers, order, etc.
func (s *Setup) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Setup.
// Note that you need to call Setup.Unwrap() before calling this method if this Setup
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Setup) Update() *SetupUpdateOne {
	return NewSetupClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Setup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Setup) Unwrap() *Setup {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Setup is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Setup) String() string {
	var builder strings.Builder
	builder.WriteString("Setup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(s.Sn)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", ")
	builder.WriteString("last_time=")
	builder.WriteString(s.LastTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(s.User)
	builder.WriteString(", ")
	builder.WriteString("pwd=")
	builder.WriteString(s.Pwd)
	builder.WriteString(", ")
	builder.WriteString("uuid1=")
	builder.WriteString(s.Uuid1)
	builder.WriteString(", ")
	builder.WriteString("uuid2=")
	builder.WriteString(s.Uuid2)
	builder.WriteByte(')')
	return builder.String()
}

// Setups is a parsable slice of Setup.
type Setups []*Setup
