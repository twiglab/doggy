// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/doggy/orm/ent/autoreg"
)

// AutoReg is the model entity for the AutoReg schema.
type AutoReg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// IP holds the value of the "ip" field.
	IP           string `json:"ip,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AutoReg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case autoreg.FieldID:
			values[i] = new(sql.NullInt64)
		case autoreg.FieldSn, autoreg.FieldIP:
			values[i] = new(sql.NullString)
		case autoreg.FieldCreateTime, autoreg.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AutoReg fields.
func (ar *AutoReg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case autoreg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case autoreg.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ar.CreateTime = value.Time
			}
		case autoreg.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ar.UpdateTime = value.Time
			}
		case autoreg.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				ar.Sn = value.String
			}
		case autoreg.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				ar.IP = value.String
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AutoReg.
// This includes values selected through modifiers, order, etc.
func (ar *AutoReg) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// Update returns a builder for updating this AutoReg.
// Note that you need to call AutoReg.Unwrap() before calling this method if this AutoReg
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AutoReg) Update() *AutoRegUpdateOne {
	return NewAutoRegClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AutoReg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AutoReg) Unwrap() *AutoReg {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AutoReg is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AutoReg) String() string {
	var builder strings.Builder
	builder.WriteString("AutoReg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ar.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ar.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(ar.Sn)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(ar.IP)
	builder.WriteByte(')')
	return builder.String()
}

// AutoRegs is a parsable slice of AutoReg.
type AutoRegs []*AutoReg
