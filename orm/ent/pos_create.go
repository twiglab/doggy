// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/pos"
)

// PosCreate is the builder for creating a Pos entity.
type PosCreate struct {
	config
	mutation *PosMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (pc *PosCreate) SetCreateTime(t time.Time) *PosCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PosCreate) SetNillableCreateTime(t *time.Time) *PosCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PosCreate) SetUpdateTime(t time.Time) *PosCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PosCreate) SetNillableUpdateTime(t *time.Time) *PosCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetSn sets the "sn" field.
func (pc *PosCreate) SetSn(s string) *PosCreate {
	pc.mutation.SetSn(s)
	return pc
}

// SetPos sets the "pos" field.
func (pc *PosCreate) SetPos(s string) *PosCreate {
	pc.mutation.SetPos(s)
	return pc
}

// SetFloor sets the "floor" field.
func (pc *PosCreate) SetFloor(s string) *PosCreate {
	pc.mutation.SetFloor(s)
	return pc
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (pc *PosCreate) SetNillableFloor(s *string) *PosCreate {
	if s != nil {
		pc.SetFloor(*s)
	}
	return pc
}

// SetBuilding sets the "building" field.
func (pc *PosCreate) SetBuilding(s string) *PosCreate {
	pc.mutation.SetBuilding(s)
	return pc
}

// SetNillableBuilding sets the "building" field if the given value is not nil.
func (pc *PosCreate) SetNillableBuilding(s *string) *PosCreate {
	if s != nil {
		pc.SetBuilding(*s)
	}
	return pc
}

// SetArea sets the "area" field.
func (pc *PosCreate) SetArea(s string) *PosCreate {
	pc.mutation.SetArea(s)
	return pc
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (pc *PosCreate) SetNillableArea(s *string) *PosCreate {
	if s != nil {
		pc.SetArea(*s)
	}
	return pc
}

// Mutation returns the PosMutation object of the builder.
func (pc *PosCreate) Mutation() *PosMutation {
	return pc.mutation
}

// Save creates the Pos in the database.
func (pc *PosCreate) Save(ctx context.Context) (*Pos, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PosCreate) SaveX(ctx context.Context) *Pos {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PosCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PosCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PosCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := pos.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := pos.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PosCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Pos.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Pos.update_time"`)}
	}
	if _, ok := pc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Pos.sn"`)}
	}
	if v, ok := pc.mutation.Sn(); ok {
		if err := pos.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Pos.sn": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Pos(); !ok {
		return &ValidationError{Name: "pos", err: errors.New(`ent: missing required field "Pos.pos"`)}
	}
	if v, ok := pc.mutation.Pos(); ok {
		if err := pos.PosValidator(v); err != nil {
			return &ValidationError{Name: "pos", err: fmt.Errorf(`ent: validator failed for field "Pos.pos": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Floor(); ok {
		if err := pos.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf(`ent: validator failed for field "Pos.floor": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Building(); ok {
		if err := pos.BuildingValidator(v); err != nil {
			return &ValidationError{Name: "building", err: fmt.Errorf(`ent: validator failed for field "Pos.building": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Area(); ok {
		if err := pos.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Pos.area": %w`, err)}
		}
	}
	return nil
}

func (pc *PosCreate) sqlSave(ctx context.Context) (*Pos, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PosCreate) createSpec() (*Pos, *sqlgraph.CreateSpec) {
	var (
		_node = &Pos{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pos.Table, sqlgraph.NewFieldSpec(pos.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(pos.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(pos.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.Sn(); ok {
		_spec.SetField(pos.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := pc.mutation.Pos(); ok {
		_spec.SetField(pos.FieldPos, field.TypeString, value)
		_node.Pos = value
	}
	if value, ok := pc.mutation.Floor(); ok {
		_spec.SetField(pos.FieldFloor, field.TypeString, value)
		_node.Floor = value
	}
	if value, ok := pc.mutation.Building(); ok {
		_spec.SetField(pos.FieldBuilding, field.TypeString, value)
		_node.Building = value
	}
	if value, ok := pc.mutation.Area(); ok {
		_spec.SetField(pos.FieldArea, field.TypeString, value)
		_node.Area = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pos.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PosUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pc *PosCreate) OnConflict(opts ...sql.ConflictOption) *PosUpsertOne {
	pc.conflict = opts
	return &PosUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pos.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PosCreate) OnConflictColumns(columns ...string) *PosUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PosUpsertOne{
		create: pc,
	}
}

type (
	// PosUpsertOne is the builder for "upsert"-ing
	//  one Pos node.
	PosUpsertOne struct {
		create *PosCreate
	}

	// PosUpsert is the "OnConflict" setter.
	PosUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *PosUpsert) SetUpdateTime(v time.Time) *PosUpsert {
	u.Set(pos.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PosUpsert) UpdateUpdateTime() *PosUpsert {
	u.SetExcluded(pos.FieldUpdateTime)
	return u
}

// SetFloor sets the "floor" field.
func (u *PosUpsert) SetFloor(v string) *PosUpsert {
	u.Set(pos.FieldFloor, v)
	return u
}

// UpdateFloor sets the "floor" field to the value that was provided on create.
func (u *PosUpsert) UpdateFloor() *PosUpsert {
	u.SetExcluded(pos.FieldFloor)
	return u
}

// ClearFloor clears the value of the "floor" field.
func (u *PosUpsert) ClearFloor() *PosUpsert {
	u.SetNull(pos.FieldFloor)
	return u
}

// SetBuilding sets the "building" field.
func (u *PosUpsert) SetBuilding(v string) *PosUpsert {
	u.Set(pos.FieldBuilding, v)
	return u
}

// UpdateBuilding sets the "building" field to the value that was provided on create.
func (u *PosUpsert) UpdateBuilding() *PosUpsert {
	u.SetExcluded(pos.FieldBuilding)
	return u
}

// ClearBuilding clears the value of the "building" field.
func (u *PosUpsert) ClearBuilding() *PosUpsert {
	u.SetNull(pos.FieldBuilding)
	return u
}

// SetArea sets the "area" field.
func (u *PosUpsert) SetArea(v string) *PosUpsert {
	u.Set(pos.FieldArea, v)
	return u
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *PosUpsert) UpdateArea() *PosUpsert {
	u.SetExcluded(pos.FieldArea)
	return u
}

// ClearArea clears the value of the "area" field.
func (u *PosUpsert) ClearArea() *PosUpsert {
	u.SetNull(pos.FieldArea)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Pos.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PosUpsertOne) UpdateNewValues() *PosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(pos.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(pos.FieldSn)
		}
		if _, exists := u.create.mutation.Pos(); exists {
			s.SetIgnore(pos.FieldPos)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pos.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PosUpsertOne) Ignore() *PosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PosUpsertOne) DoNothing() *PosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PosCreate.OnConflict
// documentation for more info.
func (u *PosUpsertOne) Update(set func(*PosUpsert)) *PosUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PosUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PosUpsertOne) SetUpdateTime(v time.Time) *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PosUpsertOne) UpdateUpdateTime() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetFloor sets the "floor" field.
func (u *PosUpsertOne) SetFloor(v string) *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.SetFloor(v)
	})
}

// UpdateFloor sets the "floor" field to the value that was provided on create.
func (u *PosUpsertOne) UpdateFloor() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.UpdateFloor()
	})
}

// ClearFloor clears the value of the "floor" field.
func (u *PosUpsertOne) ClearFloor() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.ClearFloor()
	})
}

// SetBuilding sets the "building" field.
func (u *PosUpsertOne) SetBuilding(v string) *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.SetBuilding(v)
	})
}

// UpdateBuilding sets the "building" field to the value that was provided on create.
func (u *PosUpsertOne) UpdateBuilding() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.UpdateBuilding()
	})
}

// ClearBuilding clears the value of the "building" field.
func (u *PosUpsertOne) ClearBuilding() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.ClearBuilding()
	})
}

// SetArea sets the "area" field.
func (u *PosUpsertOne) SetArea(v string) *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.SetArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *PosUpsertOne) UpdateArea() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.UpdateArea()
	})
}

// ClearArea clears the value of the "area" field.
func (u *PosUpsertOne) ClearArea() *PosUpsertOne {
	return u.Update(func(s *PosUpsert) {
		s.ClearArea()
	})
}

// Exec executes the query.
func (u *PosUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PosCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PosUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PosUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PosUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PosCreateBulk is the builder for creating many Pos entities in bulk.
type PosCreateBulk struct {
	config
	err      error
	builders []*PosCreate
	conflict []sql.ConflictOption
}

// Save creates the Pos entities in the database.
func (pcb *PosCreateBulk) Save(ctx context.Context) ([]*Pos, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pos, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PosMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PosCreateBulk) SaveX(ctx context.Context) []*Pos {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PosCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PosCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pos.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PosUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pcb *PosCreateBulk) OnConflict(opts ...sql.ConflictOption) *PosUpsertBulk {
	pcb.conflict = opts
	return &PosUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pos.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PosCreateBulk) OnConflictColumns(columns ...string) *PosUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PosUpsertBulk{
		create: pcb,
	}
}

// PosUpsertBulk is the builder for "upsert"-ing
// a bulk of Pos nodes.
type PosUpsertBulk struct {
	create *PosCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pos.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PosUpsertBulk) UpdateNewValues() *PosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(pos.FieldCreateTime)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(pos.FieldSn)
			}
			if _, exists := b.mutation.Pos(); exists {
				s.SetIgnore(pos.FieldPos)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pos.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PosUpsertBulk) Ignore() *PosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PosUpsertBulk) DoNothing() *PosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PosCreateBulk.OnConflict
// documentation for more info.
func (u *PosUpsertBulk) Update(set func(*PosUpsert)) *PosUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PosUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PosUpsertBulk) SetUpdateTime(v time.Time) *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PosUpsertBulk) UpdateUpdateTime() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetFloor sets the "floor" field.
func (u *PosUpsertBulk) SetFloor(v string) *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.SetFloor(v)
	})
}

// UpdateFloor sets the "floor" field to the value that was provided on create.
func (u *PosUpsertBulk) UpdateFloor() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.UpdateFloor()
	})
}

// ClearFloor clears the value of the "floor" field.
func (u *PosUpsertBulk) ClearFloor() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.ClearFloor()
	})
}

// SetBuilding sets the "building" field.
func (u *PosUpsertBulk) SetBuilding(v string) *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.SetBuilding(v)
	})
}

// UpdateBuilding sets the "building" field to the value that was provided on create.
func (u *PosUpsertBulk) UpdateBuilding() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.UpdateBuilding()
	})
}

// ClearBuilding clears the value of the "building" field.
func (u *PosUpsertBulk) ClearBuilding() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.ClearBuilding()
	})
}

// SetArea sets the "area" field.
func (u *PosUpsertBulk) SetArea(v string) *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.SetArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *PosUpsertBulk) UpdateArea() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.UpdateArea()
	})
}

// ClearArea clears the value of the "area" field.
func (u *PosUpsertBulk) ClearArea() *PosUpsertBulk {
	return u.Update(func(s *PosUpsert) {
		s.ClearArea()
	})
}

// Exec executes the query.
func (u *PosUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PosCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PosCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PosUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
