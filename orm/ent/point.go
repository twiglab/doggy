// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/doggy/orm/ent/point"
)

// Point is the model entity for the Point schema.
type Point struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn string `json:"sn,omitempty"`
	// Pos holds the value of the "pos" field.
	Pos string `json:"pos,omitempty"`
	// Floor holds the value of the "floor" field.
	Floor string `json:"floor,omitempty"`
	// Building holds the value of the "building" field.
	Building string `json:"building,omitempty"`
	// Area holds the value of the "area" field.
	Area         string `json:"area,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Point) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case point.FieldID:
			values[i] = new(sql.NullInt64)
		case point.FieldSn, point.FieldPos, point.FieldFloor, point.FieldBuilding, point.FieldArea:
			values[i] = new(sql.NullString)
		case point.FieldCreateTime, point.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Point fields.
func (po *Point) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case point.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case point.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				po.CreateTime = value.Time
			}
		case point.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				po.UpdateTime = value.Time
			}
		case point.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				po.Sn = value.String
			}
		case point.FieldPos:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pos", values[i])
			} else if value.Valid {
				po.Pos = value.String
			}
		case point.FieldFloor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				po.Floor = value.String
			}
		case point.FieldBuilding:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field building", values[i])
			} else if value.Valid {
				po.Building = value.String
			}
		case point.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				po.Area = value.String
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Point.
// This includes values selected through modifiers, order, etc.
func (po *Point) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Point.
// Note that you need to call Point.Unwrap() before calling this method if this Point
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Point) Update() *PointUpdateOne {
	return NewPointClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Point entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Point) Unwrap() *Point {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Point is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Point) String() string {
	var builder strings.Builder
	builder.WriteString("Point(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("create_time=")
	builder.WriteString(po.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(po.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(po.Sn)
	builder.WriteString(", ")
	builder.WriteString("pos=")
	builder.WriteString(po.Pos)
	builder.WriteString(", ")
	builder.WriteString("floor=")
	builder.WriteString(po.Floor)
	builder.WriteString(", ")
	builder.WriteString("building=")
	builder.WriteString(po.Building)
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(po.Area)
	builder.WriteByte(')')
	return builder.String()
}

// Points is a parsable slice of Point.
type Points []*Point
