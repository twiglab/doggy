// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/twiglab/doggy/orm/ent/pos"
	"github.com/twiglab/doggy/orm/ent/setup"
	"github.com/twiglab/doggy/orm/ent/using"
	"github.com/twiglab/doggy/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	posMixin := schema.Pos{}.Mixin()
	posMixinFields0 := posMixin[0].Fields()
	_ = posMixinFields0
	posFields := schema.Pos{}.Fields()
	_ = posFields
	// posDescCreateTime is the schema descriptor for create_time field.
	posDescCreateTime := posMixinFields0[0].Descriptor()
	// pos.DefaultCreateTime holds the default value on creation for the create_time field.
	pos.DefaultCreateTime = posDescCreateTime.Default.(func() time.Time)
	// posDescUpdateTime is the schema descriptor for update_time field.
	posDescUpdateTime := posMixinFields0[1].Descriptor()
	// pos.DefaultUpdateTime holds the default value on creation for the update_time field.
	pos.DefaultUpdateTime = posDescUpdateTime.Default.(func() time.Time)
	// pos.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	pos.UpdateDefaultUpdateTime = posDescUpdateTime.UpdateDefault.(func() time.Time)
	// posDescSn is the schema descriptor for sn field.
	posDescSn := posFields[0].Descriptor()
	// pos.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	pos.SnValidator = func() func(string) error {
		validators := posDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// posDescPos is the schema descriptor for pos field.
	posDescPos := posFields[1].Descriptor()
	// pos.PosValidator is a validator for the "pos" field. It is called by the builders before save.
	pos.PosValidator = func() func(string) error {
		validators := posDescPos.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(pos string) error {
			for _, fn := range fns {
				if err := fn(pos); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// posDescFloor is the schema descriptor for floor field.
	posDescFloor := posFields[2].Descriptor()
	// pos.FloorValidator is a validator for the "floor" field. It is called by the builders before save.
	pos.FloorValidator = posDescFloor.Validators[0].(func(string) error)
	// posDescBuilding is the schema descriptor for building field.
	posDescBuilding := posFields[3].Descriptor()
	// pos.BuildingValidator is a validator for the "building" field. It is called by the builders before save.
	pos.BuildingValidator = posDescBuilding.Validators[0].(func(string) error)
	// posDescArea is the schema descriptor for area field.
	posDescArea := posFields[4].Descriptor()
	// pos.AreaValidator is a validator for the "area" field. It is called by the builders before save.
	pos.AreaValidator = posDescArea.Validators[0].(func(string) error)
	setupMixin := schema.Setup{}.Mixin()
	setupMixinFields0 := setupMixin[0].Fields()
	_ = setupMixinFields0
	setupFields := schema.Setup{}.Fields()
	_ = setupFields
	// setupDescCreateTime is the schema descriptor for create_time field.
	setupDescCreateTime := setupMixinFields0[0].Descriptor()
	// setup.DefaultCreateTime holds the default value on creation for the create_time field.
	setup.DefaultCreateTime = setupDescCreateTime.Default.(func() time.Time)
	// setupDescUpdateTime is the schema descriptor for update_time field.
	setupDescUpdateTime := setupMixinFields0[1].Descriptor()
	// setup.DefaultUpdateTime holds the default value on creation for the update_time field.
	setup.DefaultUpdateTime = setupDescUpdateTime.Default.(func() time.Time)
	// setup.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	setup.UpdateDefaultUpdateTime = setupDescUpdateTime.UpdateDefault.(func() time.Time)
	// setupDescSn is the schema descriptor for sn field.
	setupDescSn := setupFields[0].Descriptor()
	// setup.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	setup.SnValidator = func() func(string) error {
		validators := setupDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// setupDescIP is the schema descriptor for ip field.
	setupDescIP := setupFields[1].Descriptor()
	// setup.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	setup.IPValidator = func() func(string) error {
		validators := setupDescIP.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ip string) error {
			for _, fn := range fns {
				if err := fn(ip); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// setupDescLastTime is the schema descriptor for last_time field.
	setupDescLastTime := setupFields[2].Descriptor()
	// setup.DefaultLastTime holds the default value on creation for the last_time field.
	setup.DefaultLastTime = setupDescLastTime.Default.(func() time.Time)
	// setup.UpdateDefaultLastTime holds the default value on update for the last_time field.
	setup.UpdateDefaultLastTime = setupDescLastTime.UpdateDefault.(func() time.Time)
	// setupDescUser is the schema descriptor for user field.
	setupDescUser := setupFields[3].Descriptor()
	// setup.UserValidator is a validator for the "user" field. It is called by the builders before save.
	setup.UserValidator = setupDescUser.Validators[0].(func(string) error)
	// setupDescPwd is the schema descriptor for pwd field.
	setupDescPwd := setupFields[4].Descriptor()
	// setup.PwdValidator is a validator for the "pwd" field. It is called by the builders before save.
	setup.PwdValidator = setupDescPwd.Validators[0].(func(string) error)
	// setupDescUuid1 is the schema descriptor for uuid1 field.
	setupDescUuid1 := setupFields[5].Descriptor()
	// setup.Uuid1Validator is a validator for the "uuid1" field. It is called by the builders before save.
	setup.Uuid1Validator = func() func(string) error {
		validators := setupDescUuid1.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uuid1 string) error {
			for _, fn := range fns {
				if err := fn(uuid1); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// setupDescUuid2 is the schema descriptor for uuid2 field.
	setupDescUuid2 := setupFields[6].Descriptor()
	// setup.Uuid2Validator is a validator for the "uuid2" field. It is called by the builders before save.
	setup.Uuid2Validator = func() func(string) error {
		validators := setupDescUuid2.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uuid2 string) error {
			for _, fn := range fns {
				if err := fn(uuid2); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	usingMixin := schema.Using{}.Mixin()
	usingMixinFields0 := usingMixin[0].Fields()
	_ = usingMixinFields0
	usingFields := schema.Using{}.Fields()
	_ = usingFields
	// usingDescCreateTime is the schema descriptor for create_time field.
	usingDescCreateTime := usingMixinFields0[0].Descriptor()
	// using.DefaultCreateTime holds the default value on creation for the create_time field.
	using.DefaultCreateTime = usingDescCreateTime.Default.(func() time.Time)
	// usingDescUpdateTime is the schema descriptor for update_time field.
	usingDescUpdateTime := usingMixinFields0[1].Descriptor()
	// using.DefaultUpdateTime holds the default value on creation for the update_time field.
	using.DefaultUpdateTime = usingDescUpdateTime.Default.(func() time.Time)
	// using.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	using.UpdateDefaultUpdateTime = usingDescUpdateTime.UpdateDefault.(func() time.Time)
	// usingDescSn is the schema descriptor for sn field.
	usingDescSn := usingFields[0].Descriptor()
	// using.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	using.SnValidator = func() func(string) error {
		validators := usingDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usingDescUUID is the schema descriptor for uuid field.
	usingDescUUID := usingFields[1].Descriptor()
	// using.UUIDValidator is a validator for the "uuid" field. It is called by the builders before save.
	using.UUIDValidator = func() func(string) error {
		validators := usingDescUUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uuid string) error {
			for _, fn := range fns {
				if err := fn(uuid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usingDescDeviceID is the schema descriptor for device_id field.
	usingDescDeviceID := usingFields[2].Descriptor()
	// using.DeviceIDValidator is a validator for the "device_id" field. It is called by the builders before save.
	using.DeviceIDValidator = usingDescDeviceID.Validators[0].(func(string) error)
	// usingDescAlg is the schema descriptor for alg field.
	usingDescAlg := usingFields[3].Descriptor()
	// using.AlgValidator is a validator for the "alg" field. It is called by the builders before save.
	using.AlgValidator = func() func(string) error {
		validators := usingDescAlg.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(alg string) error {
			for _, fn := range fns {
				if err := fn(alg); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usingDescName is the schema descriptor for name field.
	usingDescName := usingFields[4].Descriptor()
	// using.NameValidator is a validator for the "name" field. It is called by the builders before save.
	using.NameValidator = usingDescName.Validators[0].(func(string) error)
	// usingDescMemo is the schema descriptor for memo field.
	usingDescMemo := usingFields[5].Descriptor()
	// using.MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	using.MemoValidator = usingDescMemo.Validators[0].(func(string) error)
	// usingDescBk is the schema descriptor for bk field.
	usingDescBk := usingFields[6].Descriptor()
	// using.BkValidator is a validator for the "bk" field. It is called by the builders before save.
	using.BkValidator = func() func(string) error {
		validators := usingDescBk.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(bk string) error {
			for _, fn := range fns {
				if err := fn(bk); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
