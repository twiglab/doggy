// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/twiglab/doggy/orm/ent/upload"
	"github.com/twiglab/doggy/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	uploadMixin := schema.Upload{}.Mixin()
	uploadMixinFields0 := uploadMixin[0].Fields()
	_ = uploadMixinFields0
	uploadFields := schema.Upload{}.Fields()
	_ = uploadFields
	// uploadDescCreateTime is the schema descriptor for create_time field.
	uploadDescCreateTime := uploadMixinFields0[0].Descriptor()
	// upload.DefaultCreateTime holds the default value on creation for the create_time field.
	upload.DefaultCreateTime = uploadDescCreateTime.Default.(func() time.Time)
	// uploadDescUpdateTime is the schema descriptor for update_time field.
	uploadDescUpdateTime := uploadMixinFields0[1].Descriptor()
	// upload.DefaultUpdateTime holds the default value on creation for the update_time field.
	upload.DefaultUpdateTime = uploadDescUpdateTime.Default.(func() time.Time)
	// upload.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	upload.UpdateDefaultUpdateTime = uploadDescUpdateTime.UpdateDefault.(func() time.Time)
	// uploadDescSn is the schema descriptor for sn field.
	uploadDescSn := uploadFields[0].Descriptor()
	// upload.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	upload.SnValidator = func() func(string) error {
		validators := uploadDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// uploadDescIPAddr is the schema descriptor for ip_addr field.
	uploadDescIPAddr := uploadFields[1].Descriptor()
	// upload.IPAddrValidator is a validator for the "ip_addr" field. It is called by the builders before save.
	upload.IPAddrValidator = func() func(string) error {
		validators := uploadDescIPAddr.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ip_addr string) error {
			for _, fn := range fns {
				if err := fn(ip_addr); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// uploadDescUUID is the schema descriptor for uuid field.
	uploadDescUUID := uploadFields[2].Descriptor()
	// upload.UUIDValidator is a validator for the "uuid" field. It is called by the builders before save.
	upload.UUIDValidator = uploadDescUUID.Validators[0].(func(string) error)
	// uploadDescCode is the schema descriptor for code field.
	uploadDescCode := uploadFields[3].Descriptor()
	// upload.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	upload.CodeValidator = uploadDescCode.Validators[0].(func(string) error)
	// uploadDescRegTime is the schema descriptor for reg_time field.
	uploadDescRegTime := uploadFields[4].Descriptor()
	// upload.DefaultRegTime holds the default value on creation for the reg_time field.
	upload.DefaultRegTime = uploadDescRegTime.Default.(func() time.Time)
	// upload.UpdateDefaultRegTime holds the default value on update for the reg_time field.
	upload.UpdateDefaultRegTime = uploadDescRegTime.UpdateDefault.(func() time.Time)
}
