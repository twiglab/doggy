// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/twiglab/doggy/orm/ent/autoreg"
	"github.com/twiglab/doggy/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	autoregMixin := schema.AutoReg{}.Mixin()
	autoregMixinFields0 := autoregMixin[0].Fields()
	_ = autoregMixinFields0
	autoregFields := schema.AutoReg{}.Fields()
	_ = autoregFields
	// autoregDescCreateTime is the schema descriptor for create_time field.
	autoregDescCreateTime := autoregMixinFields0[0].Descriptor()
	// autoreg.DefaultCreateTime holds the default value on creation for the create_time field.
	autoreg.DefaultCreateTime = autoregDescCreateTime.Default.(func() time.Time)
	// autoregDescUpdateTime is the schema descriptor for update_time field.
	autoregDescUpdateTime := autoregMixinFields0[1].Descriptor()
	// autoreg.DefaultUpdateTime holds the default value on creation for the update_time field.
	autoreg.DefaultUpdateTime = autoregDescUpdateTime.Default.(func() time.Time)
	// autoreg.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	autoreg.UpdateDefaultUpdateTime = autoregDescUpdateTime.UpdateDefault.(func() time.Time)
	// autoregDescSn is the schema descriptor for sn field.
	autoregDescSn := autoregFields[0].Descriptor()
	// autoreg.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	autoreg.SnValidator = func() func(string) error {
		validators := autoregDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// autoregDescIP is the schema descriptor for ip field.
	autoregDescIP := autoregFields[1].Descriptor()
	// autoreg.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	autoreg.IPValidator = func() func(string) error {
		validators := autoregDescIP.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ip string) error {
			for _, fn := range fns {
				if err := fn(ip); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
