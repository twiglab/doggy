// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/twiglab/doggy/orm/ent/upload"
	"github.com/twiglab/doggy/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	uploadMixin := schema.Upload{}.Mixin()
	uploadMixinFields0 := uploadMixin[0].Fields()
	_ = uploadMixinFields0
	uploadFields := schema.Upload{}.Fields()
	_ = uploadFields
	// uploadDescCreateTime is the schema descriptor for create_time field.
	uploadDescCreateTime := uploadMixinFields0[0].Descriptor()
	// upload.DefaultCreateTime holds the default value on creation for the create_time field.
	upload.DefaultCreateTime = uploadDescCreateTime.Default.(func() time.Time)
	// uploadDescUpdateTime is the schema descriptor for update_time field.
	uploadDescUpdateTime := uploadMixinFields0[1].Descriptor()
	// upload.DefaultUpdateTime holds the default value on creation for the update_time field.
	upload.DefaultUpdateTime = uploadDescUpdateTime.Default.(func() time.Time)
	// upload.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	upload.UpdateDefaultUpdateTime = uploadDescUpdateTime.UpdateDefault.(func() time.Time)
	// uploadDescSn is the schema descriptor for sn field.
	uploadDescSn := uploadFields[0].Descriptor()
	// upload.SnValidator is a validator for the "sn" field. It is called by the builders before save.
	upload.SnValidator = func() func(string) error {
		validators := uploadDescSn.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(sn string) error {
			for _, fn := range fns {
				if err := fn(sn); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// uploadDescIP is the schema descriptor for ip field.
	uploadDescIP := uploadFields[1].Descriptor()
	// upload.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	upload.IPValidator = func() func(string) error {
		validators := uploadDescIP.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ip string) error {
			for _, fn := range fns {
				if err := fn(ip); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// uploadDescLastTime is the schema descriptor for last_time field.
	uploadDescLastTime := uploadFields[2].Descriptor()
	// upload.DefaultLastTime holds the default value on creation for the last_time field.
	upload.DefaultLastTime = uploadDescLastTime.Default.(func() time.Time)
	// upload.UpdateDefaultLastTime holds the default value on update for the last_time field.
	upload.UpdateDefaultLastTime = uploadDescLastTime.UpdateDefault.(func() time.Time)
	// uploadDescID1 is the schema descriptor for id_1 field.
	uploadDescID1 := uploadFields[3].Descriptor()
	// upload.ID1Validator is a validator for the "id_1" field. It is called by the builders before save.
	upload.ID1Validator = uploadDescID1.Validators[0].(func(string) error)
	// uploadDescCode1 is the schema descriptor for code_1 field.
	uploadDescCode1 := uploadFields[4].Descriptor()
	// upload.Code1Validator is a validator for the "code_1" field. It is called by the builders before save.
	upload.Code1Validator = uploadDescCode1.Validators[0].(func(string) error)
	// uploadDescUser is the schema descriptor for user field.
	uploadDescUser := uploadFields[5].Descriptor()
	// upload.UserValidator is a validator for the "user" field. It is called by the builders before save.
	upload.UserValidator = uploadDescUser.Validators[0].(func(string) error)
	// uploadDescPwd is the schema descriptor for pwd field.
	uploadDescPwd := uploadFields[6].Descriptor()
	// upload.PwdValidator is a validator for the "pwd" field. It is called by the builders before save.
	upload.PwdValidator = uploadDescPwd.Validators[0].(func(string) error)
}
