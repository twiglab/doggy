// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/twiglab/doggy/orm/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/doggy/orm/ent/setup"
	"github.com/twiglab/doggy/orm/ent/upload"
	"github.com/twiglab/doggy/orm/ent/using"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Setup is the client for interacting with the Setup builders.
	Setup *SetupClient
	// Upload is the client for interacting with the Upload builders.
	Upload *UploadClient
	// Using is the client for interacting with the Using builders.
	Using *UsingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Setup = NewSetupClient(c.config)
	c.Upload = NewUploadClient(c.config)
	c.Using = NewUsingClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Setup:  NewSetupClient(cfg),
		Upload: NewUploadClient(cfg),
		Using:  NewUsingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Setup:  NewSetupClient(cfg),
		Upload: NewUploadClient(cfg),
		Using:  NewUsingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Setup.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Setup.Use(hooks...)
	c.Upload.Use(hooks...)
	c.Using.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Setup.Intercept(interceptors...)
	c.Upload.Intercept(interceptors...)
	c.Using.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *SetupMutation:
		return c.Setup.mutate(ctx, m)
	case *UploadMutation:
		return c.Upload.mutate(ctx, m)
	case *UsingMutation:
		return c.Using.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// SetupClient is a client for the Setup schema.
type SetupClient struct {
	config
}

// NewSetupClient returns a client for the Setup from the given config.
func NewSetupClient(c config) *SetupClient {
	return &SetupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setup.Hooks(f(g(h())))`.
func (c *SetupClient) Use(hooks ...Hook) {
	c.hooks.Setup = append(c.hooks.Setup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setup.Intercept(f(g(h())))`.
func (c *SetupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setup = append(c.inters.Setup, interceptors...)
}

// Create returns a builder for creating a Setup entity.
func (c *SetupClient) Create() *SetupCreate {
	mutation := newSetupMutation(c.config, OpCreate)
	return &SetupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setup entities.
func (c *SetupClient) CreateBulk(builders ...*SetupCreate) *SetupCreateBulk {
	return &SetupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SetupClient) MapCreateBulk(slice any, setFunc func(*SetupCreate, int)) *SetupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SetupCreateBulk{err: fmt.Errorf("calling to SetupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SetupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SetupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setup.
func (c *SetupClient) Update() *SetupUpdate {
	mutation := newSetupMutation(c.config, OpUpdate)
	return &SetupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SetupClient) UpdateOne(s *Setup) *SetupUpdateOne {
	mutation := newSetupMutation(c.config, OpUpdateOne, withSetup(s))
	return &SetupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SetupClient) UpdateOneID(id int) *SetupUpdateOne {
	mutation := newSetupMutation(c.config, OpUpdateOne, withSetupID(id))
	return &SetupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setup.
func (c *SetupClient) Delete() *SetupDelete {
	mutation := newSetupMutation(c.config, OpDelete)
	return &SetupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SetupClient) DeleteOne(s *Setup) *SetupDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SetupClient) DeleteOneID(id int) *SetupDeleteOne {
	builder := c.Delete().Where(setup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SetupDeleteOne{builder}
}

// Query returns a query builder for Setup.
func (c *SetupClient) Query() *SetupQuery {
	return &SetupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetup},
		inters: c.Interceptors(),
	}
}

// Get returns a Setup entity by its id.
func (c *SetupClient) Get(ctx context.Context, id int) (*Setup, error) {
	return c.Query().Where(setup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SetupClient) GetX(ctx context.Context, id int) *Setup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SetupClient) Hooks() []Hook {
	return c.hooks.Setup
}

// Interceptors returns the client interceptors.
func (c *SetupClient) Interceptors() []Interceptor {
	return c.inters.Setup
}

func (c *SetupClient) mutate(ctx context.Context, m *SetupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SetupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SetupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SetupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SetupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Setup mutation op: %q", m.Op())
	}
}

// UploadClient is a client for the Upload schema.
type UploadClient struct {
	config
}

// NewUploadClient returns a client for the Upload from the given config.
func NewUploadClient(c config) *UploadClient {
	return &UploadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upload.Hooks(f(g(h())))`.
func (c *UploadClient) Use(hooks ...Hook) {
	c.hooks.Upload = append(c.hooks.Upload, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upload.Intercept(f(g(h())))`.
func (c *UploadClient) Intercept(interceptors ...Interceptor) {
	c.inters.Upload = append(c.inters.Upload, interceptors...)
}

// Create returns a builder for creating a Upload entity.
func (c *UploadClient) Create() *UploadCreate {
	mutation := newUploadMutation(c.config, OpCreate)
	return &UploadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Upload entities.
func (c *UploadClient) CreateBulk(builders ...*UploadCreate) *UploadCreateBulk {
	return &UploadCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UploadClient) MapCreateBulk(slice any, setFunc func(*UploadCreate, int)) *UploadCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UploadCreateBulk{err: fmt.Errorf("calling to UploadClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UploadCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UploadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Upload.
func (c *UploadClient) Update() *UploadUpdate {
	mutation := newUploadMutation(c.config, OpUpdate)
	return &UploadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UploadClient) UpdateOne(u *Upload) *UploadUpdateOne {
	mutation := newUploadMutation(c.config, OpUpdateOne, withUpload(u))
	return &UploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UploadClient) UpdateOneID(id int) *UploadUpdateOne {
	mutation := newUploadMutation(c.config, OpUpdateOne, withUploadID(id))
	return &UploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Upload.
func (c *UploadClient) Delete() *UploadDelete {
	mutation := newUploadMutation(c.config, OpDelete)
	return &UploadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UploadClient) DeleteOne(u *Upload) *UploadDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UploadClient) DeleteOneID(id int) *UploadDeleteOne {
	builder := c.Delete().Where(upload.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UploadDeleteOne{builder}
}

// Query returns a query builder for Upload.
func (c *UploadClient) Query() *UploadQuery {
	return &UploadQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpload},
		inters: c.Interceptors(),
	}
}

// Get returns a Upload entity by its id.
func (c *UploadClient) Get(ctx context.Context, id int) (*Upload, error) {
	return c.Query().Where(upload.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UploadClient) GetX(ctx context.Context, id int) *Upload {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UploadClient) Hooks() []Hook {
	return c.hooks.Upload
}

// Interceptors returns the client interceptors.
func (c *UploadClient) Interceptors() []Interceptor {
	return c.inters.Upload
}

func (c *UploadClient) mutate(ctx context.Context, m *UploadMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UploadCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UploadUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UploadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UploadDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Upload mutation op: %q", m.Op())
	}
}

// UsingClient is a client for the Using schema.
type UsingClient struct {
	config
}

// NewUsingClient returns a client for the Using from the given config.
func NewUsingClient(c config) *UsingClient {
	return &UsingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `using.Hooks(f(g(h())))`.
func (c *UsingClient) Use(hooks ...Hook) {
	c.hooks.Using = append(c.hooks.Using, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `using.Intercept(f(g(h())))`.
func (c *UsingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Using = append(c.inters.Using, interceptors...)
}

// Create returns a builder for creating a Using entity.
func (c *UsingClient) Create() *UsingCreate {
	mutation := newUsingMutation(c.config, OpCreate)
	return &UsingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Using entities.
func (c *UsingClient) CreateBulk(builders ...*UsingCreate) *UsingCreateBulk {
	return &UsingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsingClient) MapCreateBulk(slice any, setFunc func(*UsingCreate, int)) *UsingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsingCreateBulk{err: fmt.Errorf("calling to UsingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Using.
func (c *UsingClient) Update() *UsingUpdate {
	mutation := newUsingMutation(c.config, OpUpdate)
	return &UsingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsingClient) UpdateOne(u *Using) *UsingUpdateOne {
	mutation := newUsingMutation(c.config, OpUpdateOne, withUsing(u))
	return &UsingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsingClient) UpdateOneID(id int) *UsingUpdateOne {
	mutation := newUsingMutation(c.config, OpUpdateOne, withUsingID(id))
	return &UsingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Using.
func (c *UsingClient) Delete() *UsingDelete {
	mutation := newUsingMutation(c.config, OpDelete)
	return &UsingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsingClient) DeleteOne(u *Using) *UsingDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsingClient) DeleteOneID(id int) *UsingDeleteOne {
	builder := c.Delete().Where(using.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsingDeleteOne{builder}
}

// Query returns a query builder for Using.
func (c *UsingClient) Query() *UsingQuery {
	return &UsingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsing},
		inters: c.Interceptors(),
	}
}

// Get returns a Using entity by its id.
func (c *UsingClient) Get(ctx context.Context, id int) (*Using, error) {
	return c.Query().Where(using.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsingClient) GetX(ctx context.Context, id int) *Using {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsingClient) Hooks() []Hook {
	return c.hooks.Using
}

// Interceptors returns the client interceptors.
func (c *UsingClient) Interceptors() []Interceptor {
	return c.inters.Using
}

func (c *UsingClient) mutate(ctx context.Context, m *UsingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Using mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Setup, Upload, Using []ent.Hook
	}
	inters struct {
		Setup, Upload, Using []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
