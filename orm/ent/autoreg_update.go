// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/autoreg"
	"github.com/twiglab/doggy/orm/ent/predicate"
)

// AutoRegUpdate is the builder for updating AutoReg entities.
type AutoRegUpdate struct {
	config
	hooks    []Hook
	mutation *AutoRegMutation
}

// Where appends a list predicates to the AutoRegUpdate builder.
func (aru *AutoRegUpdate) Where(ps ...predicate.AutoReg) *AutoRegUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetUpdateTime sets the "update_time" field.
func (aru *AutoRegUpdate) SetUpdateTime(t time.Time) *AutoRegUpdate {
	aru.mutation.SetUpdateTime(t)
	return aru
}

// SetIP sets the "ip" field.
func (aru *AutoRegUpdate) SetIP(s string) *AutoRegUpdate {
	aru.mutation.SetIP(s)
	return aru
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aru *AutoRegUpdate) SetNillableIP(s *string) *AutoRegUpdate {
	if s != nil {
		aru.SetIP(*s)
	}
	return aru
}

// Mutation returns the AutoRegMutation object of the builder.
func (aru *AutoRegUpdate) Mutation() *AutoRegMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AutoRegUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AutoRegUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AutoRegUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AutoRegUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AutoRegUpdate) defaults() {
	if _, ok := aru.mutation.UpdateTime(); !ok {
		v := autoreg.UpdateDefaultUpdateTime()
		aru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AutoRegUpdate) check() error {
	if v, ok := aru.mutation.IP(); ok {
		if err := autoreg.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "AutoReg.ip": %w`, err)}
		}
	}
	return nil
}

func (aru *AutoRegUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(autoreg.Table, autoreg.Columns, sqlgraph.NewFieldSpec(autoreg.FieldID, field.TypeInt))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.UpdateTime(); ok {
		_spec.SetField(autoreg.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := aru.mutation.IP(); ok {
		_spec.SetField(autoreg.FieldIP, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autoreg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AutoRegUpdateOne is the builder for updating a single AutoReg entity.
type AutoRegUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AutoRegMutation
}

// SetUpdateTime sets the "update_time" field.
func (aruo *AutoRegUpdateOne) SetUpdateTime(t time.Time) *AutoRegUpdateOne {
	aruo.mutation.SetUpdateTime(t)
	return aruo
}

// SetIP sets the "ip" field.
func (aruo *AutoRegUpdateOne) SetIP(s string) *AutoRegUpdateOne {
	aruo.mutation.SetIP(s)
	return aruo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aruo *AutoRegUpdateOne) SetNillableIP(s *string) *AutoRegUpdateOne {
	if s != nil {
		aruo.SetIP(*s)
	}
	return aruo
}

// Mutation returns the AutoRegMutation object of the builder.
func (aruo *AutoRegUpdateOne) Mutation() *AutoRegMutation {
	return aruo.mutation
}

// Where appends a list predicates to the AutoRegUpdate builder.
func (aruo *AutoRegUpdateOne) Where(ps ...predicate.AutoReg) *AutoRegUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AutoRegUpdateOne) Select(field string, fields ...string) *AutoRegUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AutoReg entity.
func (aruo *AutoRegUpdateOne) Save(ctx context.Context) (*AutoReg, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AutoRegUpdateOne) SaveX(ctx context.Context) *AutoReg {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AutoRegUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AutoRegUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AutoRegUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdateTime(); !ok {
		v := autoreg.UpdateDefaultUpdateTime()
		aruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AutoRegUpdateOne) check() error {
	if v, ok := aruo.mutation.IP(); ok {
		if err := autoreg.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "AutoReg.ip": %w`, err)}
		}
	}
	return nil
}

func (aruo *AutoRegUpdateOne) sqlSave(ctx context.Context) (_node *AutoReg, err error) {
	if err := aruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(autoreg.Table, autoreg.Columns, sqlgraph.NewFieldSpec(autoreg.FieldID, field.TypeInt))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AutoReg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, autoreg.FieldID)
		for _, f := range fields {
			if !autoreg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != autoreg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.UpdateTime(); ok {
		_spec.SetField(autoreg.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := aruo.mutation.IP(); ok {
		_spec.SetField(autoreg.FieldIP, field.TypeString, value)
	}
	_node = &AutoReg{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{autoreg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
