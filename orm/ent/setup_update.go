// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/predicate"
	"github.com/twiglab/doggy/orm/ent/setup"
)

// SetupUpdate is the builder for updating Setup entities.
type SetupUpdate struct {
	config
	hooks    []Hook
	mutation *SetupMutation
}

// Where appends a list predicates to the SetupUpdate builder.
func (su *SetupUpdate) Where(ps ...predicate.Setup) *SetupUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SetupUpdate) SetUpdateTime(t time.Time) *SetupUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetFloor sets the "floor" field.
func (su *SetupUpdate) SetFloor(s string) *SetupUpdate {
	su.mutation.SetFloor(s)
	return su
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (su *SetupUpdate) SetNillableFloor(s *string) *SetupUpdate {
	if s != nil {
		su.SetFloor(*s)
	}
	return su
}

// ClearFloor clears the value of the "floor" field.
func (su *SetupUpdate) ClearFloor() *SetupUpdate {
	su.mutation.ClearFloor()
	return su
}

// SetBuilding sets the "building" field.
func (su *SetupUpdate) SetBuilding(s string) *SetupUpdate {
	su.mutation.SetBuilding(s)
	return su
}

// SetNillableBuilding sets the "building" field if the given value is not nil.
func (su *SetupUpdate) SetNillableBuilding(s *string) *SetupUpdate {
	if s != nil {
		su.SetBuilding(*s)
	}
	return su
}

// ClearBuilding clears the value of the "building" field.
func (su *SetupUpdate) ClearBuilding() *SetupUpdate {
	su.mutation.ClearBuilding()
	return su
}

// SetArea sets the "area" field.
func (su *SetupUpdate) SetArea(s string) *SetupUpdate {
	su.mutation.SetArea(s)
	return su
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (su *SetupUpdate) SetNillableArea(s *string) *SetupUpdate {
	if s != nil {
		su.SetArea(*s)
	}
	return su
}

// ClearArea clears the value of the "area" field.
func (su *SetupUpdate) ClearArea() *SetupUpdate {
	su.mutation.ClearArea()
	return su
}

// SetNat sets the "nat" field.
func (su *SetupUpdate) SetNat(s string) *SetupUpdate {
	su.mutation.SetNat(s)
	return su
}

// SetNillableNat sets the "nat" field if the given value is not nil.
func (su *SetupUpdate) SetNillableNat(s *string) *SetupUpdate {
	if s != nil {
		su.SetNat(*s)
	}
	return su
}

// ClearNat clears the value of the "nat" field.
func (su *SetupUpdate) ClearNat() *SetupUpdate {
	su.mutation.ClearNat()
	return su
}

// SetUser sets the "user" field.
func (su *SetupUpdate) SetUser(s string) *SetupUpdate {
	su.mutation.SetUser(s)
	return su
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (su *SetupUpdate) SetNillableUser(s *string) *SetupUpdate {
	if s != nil {
		su.SetUser(*s)
	}
	return su
}

// ClearUser clears the value of the "user" field.
func (su *SetupUpdate) ClearUser() *SetupUpdate {
	su.mutation.ClearUser()
	return su
}

// SetPwd sets the "pwd" field.
func (su *SetupUpdate) SetPwd(s string) *SetupUpdate {
	su.mutation.SetPwd(s)
	return su
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (su *SetupUpdate) SetNillablePwd(s *string) *SetupUpdate {
	if s != nil {
		su.SetPwd(*s)
	}
	return su
}

// ClearPwd clears the value of the "pwd" field.
func (su *SetupUpdate) ClearPwd() *SetupUpdate {
	su.mutation.ClearPwd()
	return su
}

// Mutation returns the SetupMutation object of the builder.
func (su *SetupUpdate) Mutation() *SetupMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SetupUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SetupUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SetupUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SetupUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SetupUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := setup.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SetupUpdate) check() error {
	if v, ok := su.mutation.Floor(); ok {
		if err := setup.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf(`ent: validator failed for field "Setup.floor": %w`, err)}
		}
	}
	if v, ok := su.mutation.Building(); ok {
		if err := setup.BuildingValidator(v); err != nil {
			return &ValidationError{Name: "building", err: fmt.Errorf(`ent: validator failed for field "Setup.building": %w`, err)}
		}
	}
	if v, ok := su.mutation.Area(); ok {
		if err := setup.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Setup.area": %w`, err)}
		}
	}
	if v, ok := su.mutation.Nat(); ok {
		if err := setup.NatValidator(v); err != nil {
			return &ValidationError{Name: "nat", err: fmt.Errorf(`ent: validator failed for field "Setup.nat": %w`, err)}
		}
	}
	if v, ok := su.mutation.User(); ok {
		if err := setup.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Setup.user": %w`, err)}
		}
	}
	if v, ok := su.mutation.Pwd(); ok {
		if err := setup.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "Setup.pwd": %w`, err)}
		}
	}
	return nil
}

func (su *SetupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(setup.Table, setup.Columns, sqlgraph.NewFieldSpec(setup.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(setup.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.Floor(); ok {
		_spec.SetField(setup.FieldFloor, field.TypeString, value)
	}
	if su.mutation.FloorCleared() {
		_spec.ClearField(setup.FieldFloor, field.TypeString)
	}
	if value, ok := su.mutation.Building(); ok {
		_spec.SetField(setup.FieldBuilding, field.TypeString, value)
	}
	if su.mutation.BuildingCleared() {
		_spec.ClearField(setup.FieldBuilding, field.TypeString)
	}
	if value, ok := su.mutation.Area(); ok {
		_spec.SetField(setup.FieldArea, field.TypeString, value)
	}
	if su.mutation.AreaCleared() {
		_spec.ClearField(setup.FieldArea, field.TypeString)
	}
	if value, ok := su.mutation.Nat(); ok {
		_spec.SetField(setup.FieldNat, field.TypeString, value)
	}
	if su.mutation.NatCleared() {
		_spec.ClearField(setup.FieldNat, field.TypeString)
	}
	if value, ok := su.mutation.User(); ok {
		_spec.SetField(setup.FieldUser, field.TypeString, value)
	}
	if su.mutation.UserCleared() {
		_spec.ClearField(setup.FieldUser, field.TypeString)
	}
	if value, ok := su.mutation.Pwd(); ok {
		_spec.SetField(setup.FieldPwd, field.TypeString, value)
	}
	if su.mutation.PwdCleared() {
		_spec.ClearField(setup.FieldPwd, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SetupUpdateOne is the builder for updating a single Setup entity.
type SetupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SetupMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SetupUpdateOne) SetUpdateTime(t time.Time) *SetupUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetFloor sets the "floor" field.
func (suo *SetupUpdateOne) SetFloor(s string) *SetupUpdateOne {
	suo.mutation.SetFloor(s)
	return suo
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillableFloor(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetFloor(*s)
	}
	return suo
}

// ClearFloor clears the value of the "floor" field.
func (suo *SetupUpdateOne) ClearFloor() *SetupUpdateOne {
	suo.mutation.ClearFloor()
	return suo
}

// SetBuilding sets the "building" field.
func (suo *SetupUpdateOne) SetBuilding(s string) *SetupUpdateOne {
	suo.mutation.SetBuilding(s)
	return suo
}

// SetNillableBuilding sets the "building" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillableBuilding(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetBuilding(*s)
	}
	return suo
}

// ClearBuilding clears the value of the "building" field.
func (suo *SetupUpdateOne) ClearBuilding() *SetupUpdateOne {
	suo.mutation.ClearBuilding()
	return suo
}

// SetArea sets the "area" field.
func (suo *SetupUpdateOne) SetArea(s string) *SetupUpdateOne {
	suo.mutation.SetArea(s)
	return suo
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillableArea(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetArea(*s)
	}
	return suo
}

// ClearArea clears the value of the "area" field.
func (suo *SetupUpdateOne) ClearArea() *SetupUpdateOne {
	suo.mutation.ClearArea()
	return suo
}

// SetNat sets the "nat" field.
func (suo *SetupUpdateOne) SetNat(s string) *SetupUpdateOne {
	suo.mutation.SetNat(s)
	return suo
}

// SetNillableNat sets the "nat" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillableNat(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetNat(*s)
	}
	return suo
}

// ClearNat clears the value of the "nat" field.
func (suo *SetupUpdateOne) ClearNat() *SetupUpdateOne {
	suo.mutation.ClearNat()
	return suo
}

// SetUser sets the "user" field.
func (suo *SetupUpdateOne) SetUser(s string) *SetupUpdateOne {
	suo.mutation.SetUser(s)
	return suo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillableUser(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetUser(*s)
	}
	return suo
}

// ClearUser clears the value of the "user" field.
func (suo *SetupUpdateOne) ClearUser() *SetupUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// SetPwd sets the "pwd" field.
func (suo *SetupUpdateOne) SetPwd(s string) *SetupUpdateOne {
	suo.mutation.SetPwd(s)
	return suo
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (suo *SetupUpdateOne) SetNillablePwd(s *string) *SetupUpdateOne {
	if s != nil {
		suo.SetPwd(*s)
	}
	return suo
}

// ClearPwd clears the value of the "pwd" field.
func (suo *SetupUpdateOne) ClearPwd() *SetupUpdateOne {
	suo.mutation.ClearPwd()
	return suo
}

// Mutation returns the SetupMutation object of the builder.
func (suo *SetupUpdateOne) Mutation() *SetupMutation {
	return suo.mutation
}

// Where appends a list predicates to the SetupUpdate builder.
func (suo *SetupUpdateOne) Where(ps ...predicate.Setup) *SetupUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SetupUpdateOne) Select(field string, fields ...string) *SetupUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Setup entity.
func (suo *SetupUpdateOne) Save(ctx context.Context) (*Setup, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SetupUpdateOne) SaveX(ctx context.Context) *Setup {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SetupUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SetupUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SetupUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := setup.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SetupUpdateOne) check() error {
	if v, ok := suo.mutation.Floor(); ok {
		if err := setup.FloorValidator(v); err != nil {
			return &ValidationError{Name: "floor", err: fmt.Errorf(`ent: validator failed for field "Setup.floor": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Building(); ok {
		if err := setup.BuildingValidator(v); err != nil {
			return &ValidationError{Name: "building", err: fmt.Errorf(`ent: validator failed for field "Setup.building": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Area(); ok {
		if err := setup.AreaValidator(v); err != nil {
			return &ValidationError{Name: "area", err: fmt.Errorf(`ent: validator failed for field "Setup.area": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Nat(); ok {
		if err := setup.NatValidator(v); err != nil {
			return &ValidationError{Name: "nat", err: fmt.Errorf(`ent: validator failed for field "Setup.nat": %w`, err)}
		}
	}
	if v, ok := suo.mutation.User(); ok {
		if err := setup.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Setup.user": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Pwd(); ok {
		if err := setup.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "Setup.pwd": %w`, err)}
		}
	}
	return nil
}

func (suo *SetupUpdateOne) sqlSave(ctx context.Context) (_node *Setup, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(setup.Table, setup.Columns, sqlgraph.NewFieldSpec(setup.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Setup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, setup.FieldID)
		for _, f := range fields {
			if !setup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != setup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(setup.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Floor(); ok {
		_spec.SetField(setup.FieldFloor, field.TypeString, value)
	}
	if suo.mutation.FloorCleared() {
		_spec.ClearField(setup.FieldFloor, field.TypeString)
	}
	if value, ok := suo.mutation.Building(); ok {
		_spec.SetField(setup.FieldBuilding, field.TypeString, value)
	}
	if suo.mutation.BuildingCleared() {
		_spec.ClearField(setup.FieldBuilding, field.TypeString)
	}
	if value, ok := suo.mutation.Area(); ok {
		_spec.SetField(setup.FieldArea, field.TypeString, value)
	}
	if suo.mutation.AreaCleared() {
		_spec.ClearField(setup.FieldArea, field.TypeString)
	}
	if value, ok := suo.mutation.Nat(); ok {
		_spec.SetField(setup.FieldNat, field.TypeString, value)
	}
	if suo.mutation.NatCleared() {
		_spec.ClearField(setup.FieldNat, field.TypeString)
	}
	if value, ok := suo.mutation.User(); ok {
		_spec.SetField(setup.FieldUser, field.TypeString, value)
	}
	if suo.mutation.UserCleared() {
		_spec.ClearField(setup.FieldUser, field.TypeString)
	}
	if value, ok := suo.mutation.Pwd(); ok {
		_spec.SetField(setup.FieldPwd, field.TypeString, value)
	}
	if suo.mutation.PwdCleared() {
		_spec.ClearField(setup.FieldPwd, field.TypeString)
	}
	_node = &Setup{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
