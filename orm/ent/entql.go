// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/twiglab/doggy/orm/ent/upload"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   upload.Table,
			Columns: upload.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: upload.FieldID,
			},
		},
		Type: "Upload",
		Fields: map[string]*sqlgraph.FieldSpec{
			upload.FieldCreateTime: {Type: field.TypeTime, Column: upload.FieldCreateTime},
			upload.FieldUpdateTime: {Type: field.TypeTime, Column: upload.FieldUpdateTime},
			upload.FieldSn:         {Type: field.TypeString, Column: upload.FieldSn},
			upload.FieldIP:         {Type: field.TypeString, Column: upload.FieldIP},
			upload.FieldLastTime:   {Type: field.TypeTime, Column: upload.FieldLastTime},
			upload.FieldUser:       {Type: field.TypeString, Column: upload.FieldUser},
			upload.FieldPwd:        {Type: field.TypeString, Column: upload.FieldPwd},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (uq *UploadQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UploadQuery builder.
func (uq *UploadQuery) Filter() *UploadFilter {
	return &UploadFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UploadMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UploadMutation builder.
func (m *UploadMutation) Filter() *UploadFilter {
	return &UploadFilter{config: m.config, predicateAdder: m}
}

// UploadFilter provides a generic filtering capability at runtime for UploadQuery.
type UploadFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UploadFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UploadFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(upload.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UploadFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(upload.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UploadFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(upload.FieldUpdateTime))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *UploadFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(upload.FieldSn))
}

// WhereIP applies the entql string predicate on the ip field.
func (f *UploadFilter) WhereIP(p entql.StringP) {
	f.Where(p.Field(upload.FieldIP))
}

// WhereLastTime applies the entql time.Time predicate on the last_time field.
func (f *UploadFilter) WhereLastTime(p entql.TimeP) {
	f.Where(p.Field(upload.FieldLastTime))
}

// WhereUser applies the entql string predicate on the user field.
func (f *UploadFilter) WhereUser(p entql.StringP) {
	f.Where(p.Field(upload.FieldUser))
}

// WherePwd applies the entql string predicate on the pwd field.
func (f *UploadFilter) WherePwd(p entql.StringP) {
	f.Where(p.Field(upload.FieldPwd))
}
