// Code generated by ent, DO NOT EDIT.

package point

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the point type in the database.
	Label = "point"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldPos holds the string denoting the pos field in the database.
	FieldPos = "pos"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldBuilding holds the string denoting the building field in the database.
	FieldBuilding = "building"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// Table holds the table name of the point in the database.
	Table = "camera_point"
)

// Columns holds all SQL columns for point fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldSn,
	FieldPos,
	FieldFloor,
	FieldBuilding,
	FieldArea,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// SnValidator is a validator for the "sn" field. It is called by the builders before save.
	SnValidator func(string) error
	// PosValidator is a validator for the "pos" field. It is called by the builders before save.
	PosValidator func(string) error
	// FloorValidator is a validator for the "floor" field. It is called by the builders before save.
	FloorValidator func(string) error
	// BuildingValidator is a validator for the "building" field. It is called by the builders before save.
	BuildingValidator func(string) error
	// AreaValidator is a validator for the "area" field. It is called by the builders before save.
	AreaValidator func(string) error
)

// OrderOption defines the ordering options for the Point queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByPos orders the results by the pos field.
func ByPos(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPos, opts...).ToFunc()
}

// ByFloor orders the results by the floor field.
func ByFloor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloor, opts...).ToFunc()
}

// ByBuilding orders the results by the building field.
func ByBuilding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuilding, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}
