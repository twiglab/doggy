// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/upload"
)

// UploadCreate is the builder for creating a Upload entity.
type UploadCreate struct {
	config
	mutation *UploadMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uc *UploadCreate) SetCreateTime(t time.Time) *UploadCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UploadCreate) SetNillableCreateTime(t *time.Time) *UploadCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UploadCreate) SetUpdateTime(t time.Time) *UploadCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UploadCreate) SetNillableUpdateTime(t *time.Time) *UploadCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetSn sets the "sn" field.
func (uc *UploadCreate) SetSn(s string) *UploadCreate {
	uc.mutation.SetSn(s)
	return uc
}

// SetIP sets the "ip" field.
func (uc *UploadCreate) SetIP(s string) *UploadCreate {
	uc.mutation.SetIP(s)
	return uc
}

// SetLastTime sets the "last_time" field.
func (uc *UploadCreate) SetLastTime(t time.Time) *UploadCreate {
	uc.mutation.SetLastTime(t)
	return uc
}

// SetNillableLastTime sets the "last_time" field if the given value is not nil.
func (uc *UploadCreate) SetNillableLastTime(t *time.Time) *UploadCreate {
	if t != nil {
		uc.SetLastTime(*t)
	}
	return uc
}

// SetID1 sets the "id_1" field.
func (uc *UploadCreate) SetID1(s string) *UploadCreate {
	uc.mutation.SetID1(s)
	return uc
}

// SetNillableID1 sets the "id_1" field if the given value is not nil.
func (uc *UploadCreate) SetNillableID1(s *string) *UploadCreate {
	if s != nil {
		uc.SetID1(*s)
	}
	return uc
}

// SetCode1 sets the "code_1" field.
func (uc *UploadCreate) SetCode1(s string) *UploadCreate {
	uc.mutation.SetCode1(s)
	return uc
}

// SetNillableCode1 sets the "code_1" field if the given value is not nil.
func (uc *UploadCreate) SetNillableCode1(s *string) *UploadCreate {
	if s != nil {
		uc.SetCode1(*s)
	}
	return uc
}

// SetID2 sets the "id_2" field.
func (uc *UploadCreate) SetID2(s string) *UploadCreate {
	uc.mutation.SetID2(s)
	return uc
}

// SetNillableID2 sets the "id_2" field if the given value is not nil.
func (uc *UploadCreate) SetNillableID2(s *string) *UploadCreate {
	if s != nil {
		uc.SetID2(*s)
	}
	return uc
}

// SetCode2 sets the "code_2" field.
func (uc *UploadCreate) SetCode2(s string) *UploadCreate {
	uc.mutation.SetCode2(s)
	return uc
}

// SetNillableCode2 sets the "code_2" field if the given value is not nil.
func (uc *UploadCreate) SetNillableCode2(s *string) *UploadCreate {
	if s != nil {
		uc.SetCode2(*s)
	}
	return uc
}

// SetUser sets the "user" field.
func (uc *UploadCreate) SetUser(s string) *UploadCreate {
	uc.mutation.SetUser(s)
	return uc
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (uc *UploadCreate) SetNillableUser(s *string) *UploadCreate {
	if s != nil {
		uc.SetUser(*s)
	}
	return uc
}

// SetPwd sets the "pwd" field.
func (uc *UploadCreate) SetPwd(s string) *UploadCreate {
	uc.mutation.SetPwd(s)
	return uc
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (uc *UploadCreate) SetNillablePwd(s *string) *UploadCreate {
	if s != nil {
		uc.SetPwd(*s)
	}
	return uc
}

// Mutation returns the UploadMutation object of the builder.
func (uc *UploadCreate) Mutation() *UploadMutation {
	return uc.mutation
}

// Save creates the Upload in the database.
func (uc *UploadCreate) Save(ctx context.Context) (*Upload, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UploadCreate) SaveX(ctx context.Context) *Upload {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UploadCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UploadCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UploadCreate) defaults() {
	if _, ok := uc.mutation.CreateTime(); !ok {
		v := upload.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		v := upload.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	if _, ok := uc.mutation.LastTime(); !ok {
		v := upload.DefaultLastTime()
		uc.mutation.SetLastTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UploadCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Upload.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Upload.update_time"`)}
	}
	if _, ok := uc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Upload.sn"`)}
	}
	if v, ok := uc.mutation.Sn(); ok {
		if err := upload.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Upload.sn": %w`, err)}
		}
	}
	if _, ok := uc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Upload.ip"`)}
	}
	if v, ok := uc.mutation.IP(); ok {
		if err := upload.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Upload.ip": %w`, err)}
		}
	}
	if _, ok := uc.mutation.LastTime(); !ok {
		return &ValidationError{Name: "last_time", err: errors.New(`ent: missing required field "Upload.last_time"`)}
	}
	if v, ok := uc.mutation.ID1(); ok {
		if err := upload.ID1Validator(v); err != nil {
			return &ValidationError{Name: "id_1", err: fmt.Errorf(`ent: validator failed for field "Upload.id_1": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Code1(); ok {
		if err := upload.Code1Validator(v); err != nil {
			return &ValidationError{Name: "code_1", err: fmt.Errorf(`ent: validator failed for field "Upload.code_1": %w`, err)}
		}
	}
	if v, ok := uc.mutation.ID2(); ok {
		if err := upload.ID2Validator(v); err != nil {
			return &ValidationError{Name: "id_2", err: fmt.Errorf(`ent: validator failed for field "Upload.id_2": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Code2(); ok {
		if err := upload.Code2Validator(v); err != nil {
			return &ValidationError{Name: "code_2", err: fmt.Errorf(`ent: validator failed for field "Upload.code_2": %w`, err)}
		}
	}
	if v, ok := uc.mutation.User(); ok {
		if err := upload.UserValidator(v); err != nil {
			return &ValidationError{Name: "user", err: fmt.Errorf(`ent: validator failed for field "Upload.user": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Pwd(); ok {
		if err := upload.PwdValidator(v); err != nil {
			return &ValidationError{Name: "pwd", err: fmt.Errorf(`ent: validator failed for field "Upload.pwd": %w`, err)}
		}
	}
	return nil
}

func (uc *UploadCreate) sqlSave(ctx context.Context) (*Upload, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UploadCreate) createSpec() (*Upload, *sqlgraph.CreateSpec) {
	var (
		_node = &Upload{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(upload.Table, sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(upload.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.SetField(upload.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.Sn(); ok {
		_spec.SetField(upload.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := uc.mutation.IP(); ok {
		_spec.SetField(upload.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := uc.mutation.LastTime(); ok {
		_spec.SetField(upload.FieldLastTime, field.TypeTime, value)
		_node.LastTime = value
	}
	if value, ok := uc.mutation.ID1(); ok {
		_spec.SetField(upload.FieldID1, field.TypeString, value)
		_node.ID1 = value
	}
	if value, ok := uc.mutation.Code1(); ok {
		_spec.SetField(upload.FieldCode1, field.TypeString, value)
		_node.Code1 = value
	}
	if value, ok := uc.mutation.ID2(); ok {
		_spec.SetField(upload.FieldID2, field.TypeString, value)
		_node.ID2 = value
	}
	if value, ok := uc.mutation.Code2(); ok {
		_spec.SetField(upload.FieldCode2, field.TypeString, value)
		_node.Code2 = value
	}
	if value, ok := uc.mutation.User(); ok {
		_spec.SetField(upload.FieldUser, field.TypeString, value)
		_node.User = value
	}
	if value, ok := uc.mutation.Pwd(); ok {
		_spec.SetField(upload.FieldPwd, field.TypeString, value)
		_node.Pwd = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Upload.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UploadUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uc *UploadCreate) OnConflict(opts ...sql.ConflictOption) *UploadUpsertOne {
	uc.conflict = opts
	return &UploadUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Upload.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UploadCreate) OnConflictColumns(columns ...string) *UploadUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UploadUpsertOne{
		create: uc,
	}
}

type (
	// UploadUpsertOne is the builder for "upsert"-ing
	//  one Upload node.
	UploadUpsertOne struct {
		create *UploadCreate
	}

	// UploadUpsert is the "OnConflict" setter.
	UploadUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UploadUpsert) SetUpdateTime(v time.Time) *UploadUpsert {
	u.Set(upload.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UploadUpsert) UpdateUpdateTime() *UploadUpsert {
	u.SetExcluded(upload.FieldUpdateTime)
	return u
}

// SetIP sets the "ip" field.
func (u *UploadUpsert) SetIP(v string) *UploadUpsert {
	u.Set(upload.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *UploadUpsert) UpdateIP() *UploadUpsert {
	u.SetExcluded(upload.FieldIP)
	return u
}

// SetLastTime sets the "last_time" field.
func (u *UploadUpsert) SetLastTime(v time.Time) *UploadUpsert {
	u.Set(upload.FieldLastTime, v)
	return u
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *UploadUpsert) UpdateLastTime() *UploadUpsert {
	u.SetExcluded(upload.FieldLastTime)
	return u
}

// SetID1 sets the "id_1" field.
func (u *UploadUpsert) SetID1(v string) *UploadUpsert {
	u.Set(upload.FieldID1, v)
	return u
}

// UpdateID1 sets the "id_1" field to the value that was provided on create.
func (u *UploadUpsert) UpdateID1() *UploadUpsert {
	u.SetExcluded(upload.FieldID1)
	return u
}

// ClearID1 clears the value of the "id_1" field.
func (u *UploadUpsert) ClearID1() *UploadUpsert {
	u.SetNull(upload.FieldID1)
	return u
}

// SetCode1 sets the "code_1" field.
func (u *UploadUpsert) SetCode1(v string) *UploadUpsert {
	u.Set(upload.FieldCode1, v)
	return u
}

// UpdateCode1 sets the "code_1" field to the value that was provided on create.
func (u *UploadUpsert) UpdateCode1() *UploadUpsert {
	u.SetExcluded(upload.FieldCode1)
	return u
}

// ClearCode1 clears the value of the "code_1" field.
func (u *UploadUpsert) ClearCode1() *UploadUpsert {
	u.SetNull(upload.FieldCode1)
	return u
}

// SetID2 sets the "id_2" field.
func (u *UploadUpsert) SetID2(v string) *UploadUpsert {
	u.Set(upload.FieldID2, v)
	return u
}

// UpdateID2 sets the "id_2" field to the value that was provided on create.
func (u *UploadUpsert) UpdateID2() *UploadUpsert {
	u.SetExcluded(upload.FieldID2)
	return u
}

// ClearID2 clears the value of the "id_2" field.
func (u *UploadUpsert) ClearID2() *UploadUpsert {
	u.SetNull(upload.FieldID2)
	return u
}

// SetCode2 sets the "code_2" field.
func (u *UploadUpsert) SetCode2(v string) *UploadUpsert {
	u.Set(upload.FieldCode2, v)
	return u
}

// UpdateCode2 sets the "code_2" field to the value that was provided on create.
func (u *UploadUpsert) UpdateCode2() *UploadUpsert {
	u.SetExcluded(upload.FieldCode2)
	return u
}

// ClearCode2 clears the value of the "code_2" field.
func (u *UploadUpsert) ClearCode2() *UploadUpsert {
	u.SetNull(upload.FieldCode2)
	return u
}

// SetUser sets the "user" field.
func (u *UploadUpsert) SetUser(v string) *UploadUpsert {
	u.Set(upload.FieldUser, v)
	return u
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *UploadUpsert) UpdateUser() *UploadUpsert {
	u.SetExcluded(upload.FieldUser)
	return u
}

// ClearUser clears the value of the "user" field.
func (u *UploadUpsert) ClearUser() *UploadUpsert {
	u.SetNull(upload.FieldUser)
	return u
}

// SetPwd sets the "pwd" field.
func (u *UploadUpsert) SetPwd(v string) *UploadUpsert {
	u.Set(upload.FieldPwd, v)
	return u
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UploadUpsert) UpdatePwd() *UploadUpsert {
	u.SetExcluded(upload.FieldPwd)
	return u
}

// ClearPwd clears the value of the "pwd" field.
func (u *UploadUpsert) ClearPwd() *UploadUpsert {
	u.SetNull(upload.FieldPwd)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Upload.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UploadUpsertOne) UpdateNewValues() *UploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(upload.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(upload.FieldSn)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Upload.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UploadUpsertOne) Ignore() *UploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UploadUpsertOne) DoNothing() *UploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UploadCreate.OnConflict
// documentation for more info.
func (u *UploadUpsertOne) Update(set func(*UploadUpsert)) *UploadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UploadUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UploadUpsertOne) SetUpdateTime(v time.Time) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateUpdateTime() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *UploadUpsertOne) SetIP(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateIP() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateIP()
	})
}

// SetLastTime sets the "last_time" field.
func (u *UploadUpsertOne) SetLastTime(v time.Time) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateLastTime() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateLastTime()
	})
}

// SetID1 sets the "id_1" field.
func (u *UploadUpsertOne) SetID1(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetID1(v)
	})
}

// UpdateID1 sets the "id_1" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateID1() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateID1()
	})
}

// ClearID1 clears the value of the "id_1" field.
func (u *UploadUpsertOne) ClearID1() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearID1()
	})
}

// SetCode1 sets the "code_1" field.
func (u *UploadUpsertOne) SetCode1(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetCode1(v)
	})
}

// UpdateCode1 sets the "code_1" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateCode1() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateCode1()
	})
}

// ClearCode1 clears the value of the "code_1" field.
func (u *UploadUpsertOne) ClearCode1() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearCode1()
	})
}

// SetID2 sets the "id_2" field.
func (u *UploadUpsertOne) SetID2(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetID2(v)
	})
}

// UpdateID2 sets the "id_2" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateID2() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateID2()
	})
}

// ClearID2 clears the value of the "id_2" field.
func (u *UploadUpsertOne) ClearID2() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearID2()
	})
}

// SetCode2 sets the "code_2" field.
func (u *UploadUpsertOne) SetCode2(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetCode2(v)
	})
}

// UpdateCode2 sets the "code_2" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateCode2() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateCode2()
	})
}

// ClearCode2 clears the value of the "code_2" field.
func (u *UploadUpsertOne) ClearCode2() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearCode2()
	})
}

// SetUser sets the "user" field.
func (u *UploadUpsertOne) SetUser(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdateUser() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateUser()
	})
}

// ClearUser clears the value of the "user" field.
func (u *UploadUpsertOne) ClearUser() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearUser()
	})
}

// SetPwd sets the "pwd" field.
func (u *UploadUpsertOne) SetPwd(v string) *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UploadUpsertOne) UpdatePwd() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.UpdatePwd()
	})
}

// ClearPwd clears the value of the "pwd" field.
func (u *UploadUpsertOne) ClearPwd() *UploadUpsertOne {
	return u.Update(func(s *UploadUpsert) {
		s.ClearPwd()
	})
}

// Exec executes the query.
func (u *UploadUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UploadCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UploadUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UploadUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UploadUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UploadCreateBulk is the builder for creating many Upload entities in bulk.
type UploadCreateBulk struct {
	config
	err      error
	builders []*UploadCreate
	conflict []sql.ConflictOption
}

// Save creates the Upload entities in the database.
func (ucb *UploadCreateBulk) Save(ctx context.Context) ([]*Upload, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Upload, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UploadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UploadCreateBulk) SaveX(ctx context.Context) []*Upload {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UploadCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UploadCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Upload.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UploadUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucb *UploadCreateBulk) OnConflict(opts ...sql.ConflictOption) *UploadUpsertBulk {
	ucb.conflict = opts
	return &UploadUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Upload.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UploadCreateBulk) OnConflictColumns(columns ...string) *UploadUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UploadUpsertBulk{
		create: ucb,
	}
}

// UploadUpsertBulk is the builder for "upsert"-ing
// a bulk of Upload nodes.
type UploadUpsertBulk struct {
	create *UploadCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Upload.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UploadUpsertBulk) UpdateNewValues() *UploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(upload.FieldCreateTime)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(upload.FieldSn)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Upload.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UploadUpsertBulk) Ignore() *UploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UploadUpsertBulk) DoNothing() *UploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UploadCreateBulk.OnConflict
// documentation for more info.
func (u *UploadUpsertBulk) Update(set func(*UploadUpsert)) *UploadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UploadUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UploadUpsertBulk) SetUpdateTime(v time.Time) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateUpdateTime() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *UploadUpsertBulk) SetIP(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateIP() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateIP()
	})
}

// SetLastTime sets the "last_time" field.
func (u *UploadUpsertBulk) SetLastTime(v time.Time) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateLastTime() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateLastTime()
	})
}

// SetID1 sets the "id_1" field.
func (u *UploadUpsertBulk) SetID1(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetID1(v)
	})
}

// UpdateID1 sets the "id_1" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateID1() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateID1()
	})
}

// ClearID1 clears the value of the "id_1" field.
func (u *UploadUpsertBulk) ClearID1() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearID1()
	})
}

// SetCode1 sets the "code_1" field.
func (u *UploadUpsertBulk) SetCode1(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetCode1(v)
	})
}

// UpdateCode1 sets the "code_1" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateCode1() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateCode1()
	})
}

// ClearCode1 clears the value of the "code_1" field.
func (u *UploadUpsertBulk) ClearCode1() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearCode1()
	})
}

// SetID2 sets the "id_2" field.
func (u *UploadUpsertBulk) SetID2(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetID2(v)
	})
}

// UpdateID2 sets the "id_2" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateID2() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateID2()
	})
}

// ClearID2 clears the value of the "id_2" field.
func (u *UploadUpsertBulk) ClearID2() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearID2()
	})
}

// SetCode2 sets the "code_2" field.
func (u *UploadUpsertBulk) SetCode2(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetCode2(v)
	})
}

// UpdateCode2 sets the "code_2" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateCode2() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateCode2()
	})
}

// ClearCode2 clears the value of the "code_2" field.
func (u *UploadUpsertBulk) ClearCode2() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearCode2()
	})
}

// SetUser sets the "user" field.
func (u *UploadUpsertBulk) SetUser(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetUser(v)
	})
}

// UpdateUser sets the "user" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdateUser() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdateUser()
	})
}

// ClearUser clears the value of the "user" field.
func (u *UploadUpsertBulk) ClearUser() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearUser()
	})
}

// SetPwd sets the "pwd" field.
func (u *UploadUpsertBulk) SetPwd(v string) *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.SetPwd(v)
	})
}

// UpdatePwd sets the "pwd" field to the value that was provided on create.
func (u *UploadUpsertBulk) UpdatePwd() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.UpdatePwd()
	})
}

// ClearPwd clears the value of the "pwd" field.
func (u *UploadUpsertBulk) ClearPwd() *UploadUpsertBulk {
	return u.Update(func(s *UploadUpsert) {
		s.ClearPwd()
	})
}

// Exec executes the query.
func (u *UploadUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UploadCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UploadCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UploadUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
