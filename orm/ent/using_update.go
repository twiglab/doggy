// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/predicate"
	"github.com/twiglab/doggy/orm/ent/using"
)

// UsingUpdate is the builder for updating Using entities.
type UsingUpdate struct {
	config
	hooks    []Hook
	mutation *UsingMutation
}

// Where appends a list predicates to the UsingUpdate builder.
func (uu *UsingUpdate) Where(ps ...predicate.Using) *UsingUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UsingUpdate) SetUpdateTime(t time.Time) *UsingUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetUUID sets the "uuid" field.
func (uu *UsingUpdate) SetUUID(s string) *UsingUpdate {
	uu.mutation.SetUUID(s)
	return uu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uu *UsingUpdate) SetNillableUUID(s *string) *UsingUpdate {
	if s != nil {
		uu.SetUUID(*s)
	}
	return uu
}

// SetDeviceID sets the "device_id" field.
func (uu *UsingUpdate) SetDeviceID(s string) *UsingUpdate {
	uu.mutation.SetDeviceID(s)
	return uu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (uu *UsingUpdate) SetNillableDeviceID(s *string) *UsingUpdate {
	if s != nil {
		uu.SetDeviceID(*s)
	}
	return uu
}

// SetAlg sets the "alg" field.
func (uu *UsingUpdate) SetAlg(s string) *UsingUpdate {
	uu.mutation.SetAlg(s)
	return uu
}

// SetNillableAlg sets the "alg" field if the given value is not nil.
func (uu *UsingUpdate) SetNillableAlg(s *string) *UsingUpdate {
	if s != nil {
		uu.SetAlg(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UsingUpdate) SetName(s string) *UsingUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UsingUpdate) SetNillableName(s *string) *UsingUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UsingUpdate) ClearName() *UsingUpdate {
	uu.mutation.ClearName()
	return uu
}

// Mutation returns the UsingMutation object of the builder.
func (uu *UsingUpdate) Mutation() *UsingMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsingUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsingUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsingUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsingUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UsingUpdate) defaults() {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		v := using.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsingUpdate) check() error {
	if v, ok := uu.mutation.UUID(); ok {
		if err := using.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "Using.uuid": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DeviceID(); ok {
		if err := using.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "Using.device_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Alg(); ok {
		if err := using.AlgValidator(v); err != nil {
			return &ValidationError{Name: "alg", err: fmt.Errorf(`ent: validator failed for field "Using.alg": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := using.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Using.name": %w`, err)}
		}
	}
	return nil
}

func (uu *UsingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(using.Table, using.Columns, sqlgraph.NewFieldSpec(using.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(using.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UUID(); ok {
		_spec.SetField(using.FieldUUID, field.TypeString, value)
	}
	if value, ok := uu.mutation.DeviceID(); ok {
		_spec.SetField(using.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Alg(); ok {
		_spec.SetField(using.FieldAlg, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(using.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(using.FieldName, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{using.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsingUpdateOne is the builder for updating a single Using entity.
type UsingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsingMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UsingUpdateOne) SetUpdateTime(t time.Time) *UsingUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetUUID sets the "uuid" field.
func (uuo *UsingUpdateOne) SetUUID(s string) *UsingUpdateOne {
	uuo.mutation.SetUUID(s)
	return uuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uuo *UsingUpdateOne) SetNillableUUID(s *string) *UsingUpdateOne {
	if s != nil {
		uuo.SetUUID(*s)
	}
	return uuo
}

// SetDeviceID sets the "device_id" field.
func (uuo *UsingUpdateOne) SetDeviceID(s string) *UsingUpdateOne {
	uuo.mutation.SetDeviceID(s)
	return uuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (uuo *UsingUpdateOne) SetNillableDeviceID(s *string) *UsingUpdateOne {
	if s != nil {
		uuo.SetDeviceID(*s)
	}
	return uuo
}

// SetAlg sets the "alg" field.
func (uuo *UsingUpdateOne) SetAlg(s string) *UsingUpdateOne {
	uuo.mutation.SetAlg(s)
	return uuo
}

// SetNillableAlg sets the "alg" field if the given value is not nil.
func (uuo *UsingUpdateOne) SetNillableAlg(s *string) *UsingUpdateOne {
	if s != nil {
		uuo.SetAlg(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UsingUpdateOne) SetName(s string) *UsingUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UsingUpdateOne) SetNillableName(s *string) *UsingUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UsingUpdateOne) ClearName() *UsingUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// Mutation returns the UsingMutation object of the builder.
func (uuo *UsingUpdateOne) Mutation() *UsingMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UsingUpdate builder.
func (uuo *UsingUpdateOne) Where(ps ...predicate.Using) *UsingUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsingUpdateOne) Select(field string, fields ...string) *UsingUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Using entity.
func (uuo *UsingUpdateOne) Save(ctx context.Context) (*Using, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsingUpdateOne) SaveX(ctx context.Context) *Using {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsingUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsingUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UsingUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		v := using.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsingUpdateOne) check() error {
	if v, ok := uuo.mutation.UUID(); ok {
		if err := using.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "Using.uuid": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DeviceID(); ok {
		if err := using.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "Using.device_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Alg(); ok {
		if err := using.AlgValidator(v); err != nil {
			return &ValidationError{Name: "alg", err: fmt.Errorf(`ent: validator failed for field "Using.alg": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := using.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Using.name": %w`, err)}
		}
	}
	return nil
}

func (uuo *UsingUpdateOne) sqlSave(ctx context.Context) (_node *Using, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(using.Table, using.Columns, sqlgraph.NewFieldSpec(using.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Using.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, using.FieldID)
		for _, f := range fields {
			if !using.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != using.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(using.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UUID(); ok {
		_spec.SetField(using.FieldUUID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DeviceID(); ok {
		_spec.SetField(using.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Alg(); ok {
		_spec.SetField(using.FieldAlg, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(using.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(using.FieldName, field.TypeString)
	}
	_node = &Using{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{using.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
