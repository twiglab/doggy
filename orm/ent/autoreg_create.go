// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/doggy/orm/ent/autoreg"
)

// AutoRegCreate is the builder for creating a AutoReg entity.
type AutoRegCreate struct {
	config
	mutation *AutoRegMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (arc *AutoRegCreate) SetCreateTime(t time.Time) *AutoRegCreate {
	arc.mutation.SetCreateTime(t)
	return arc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (arc *AutoRegCreate) SetNillableCreateTime(t *time.Time) *AutoRegCreate {
	if t != nil {
		arc.SetCreateTime(*t)
	}
	return arc
}

// SetUpdateTime sets the "update_time" field.
func (arc *AutoRegCreate) SetUpdateTime(t time.Time) *AutoRegCreate {
	arc.mutation.SetUpdateTime(t)
	return arc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (arc *AutoRegCreate) SetNillableUpdateTime(t *time.Time) *AutoRegCreate {
	if t != nil {
		arc.SetUpdateTime(*t)
	}
	return arc
}

// SetSn sets the "sn" field.
func (arc *AutoRegCreate) SetSn(s string) *AutoRegCreate {
	arc.mutation.SetSn(s)
	return arc
}

// SetIP sets the "ip" field.
func (arc *AutoRegCreate) SetIP(s string) *AutoRegCreate {
	arc.mutation.SetIP(s)
	return arc
}

// Mutation returns the AutoRegMutation object of the builder.
func (arc *AutoRegCreate) Mutation() *AutoRegMutation {
	return arc.mutation
}

// Save creates the AutoReg in the database.
func (arc *AutoRegCreate) Save(ctx context.Context) (*AutoReg, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AutoRegCreate) SaveX(ctx context.Context) *AutoReg {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AutoRegCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AutoRegCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AutoRegCreate) defaults() {
	if _, ok := arc.mutation.CreateTime(); !ok {
		v := autoreg.DefaultCreateTime()
		arc.mutation.SetCreateTime(v)
	}
	if _, ok := arc.mutation.UpdateTime(); !ok {
		v := autoreg.DefaultUpdateTime()
		arc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AutoRegCreate) check() error {
	if _, ok := arc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "AutoReg.create_time"`)}
	}
	if _, ok := arc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "AutoReg.update_time"`)}
	}
	if _, ok := arc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "AutoReg.sn"`)}
	}
	if v, ok := arc.mutation.Sn(); ok {
		if err := autoreg.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "AutoReg.sn": %w`, err)}
		}
	}
	if _, ok := arc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "AutoReg.ip"`)}
	}
	if v, ok := arc.mutation.IP(); ok {
		if err := autoreg.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "AutoReg.ip": %w`, err)}
		}
	}
	return nil
}

func (arc *AutoRegCreate) sqlSave(ctx context.Context) (*AutoReg, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AutoRegCreate) createSpec() (*AutoReg, *sqlgraph.CreateSpec) {
	var (
		_node = &AutoReg{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(autoreg.Table, sqlgraph.NewFieldSpec(autoreg.FieldID, field.TypeInt))
	)
	_spec.OnConflict = arc.conflict
	if value, ok := arc.mutation.CreateTime(); ok {
		_spec.SetField(autoreg.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := arc.mutation.UpdateTime(); ok {
		_spec.SetField(autoreg.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := arc.mutation.Sn(); ok {
		_spec.SetField(autoreg.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := arc.mutation.IP(); ok {
		_spec.SetField(autoreg.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AutoReg.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AutoRegUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (arc *AutoRegCreate) OnConflict(opts ...sql.ConflictOption) *AutoRegUpsertOne {
	arc.conflict = opts
	return &AutoRegUpsertOne{
		create: arc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arc *AutoRegCreate) OnConflictColumns(columns ...string) *AutoRegUpsertOne {
	arc.conflict = append(arc.conflict, sql.ConflictColumns(columns...))
	return &AutoRegUpsertOne{
		create: arc,
	}
}

type (
	// AutoRegUpsertOne is the builder for "upsert"-ing
	//  one AutoReg node.
	AutoRegUpsertOne struct {
		create *AutoRegCreate
	}

	// AutoRegUpsert is the "OnConflict" setter.
	AutoRegUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *AutoRegUpsert) SetUpdateTime(v time.Time) *AutoRegUpsert {
	u.Set(autoreg.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AutoRegUpsert) UpdateUpdateTime() *AutoRegUpsert {
	u.SetExcluded(autoreg.FieldUpdateTime)
	return u
}

// SetIP sets the "ip" field.
func (u *AutoRegUpsert) SetIP(v string) *AutoRegUpsert {
	u.Set(autoreg.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AutoRegUpsert) UpdateIP() *AutoRegUpsert {
	u.SetExcluded(autoreg.FieldIP)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AutoRegUpsertOne) UpdateNewValues() *AutoRegUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(autoreg.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(autoreg.FieldSn)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AutoRegUpsertOne) Ignore() *AutoRegUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AutoRegUpsertOne) DoNothing() *AutoRegUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AutoRegCreate.OnConflict
// documentation for more info.
func (u *AutoRegUpsertOne) Update(set func(*AutoRegUpsert)) *AutoRegUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AutoRegUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AutoRegUpsertOne) SetUpdateTime(v time.Time) *AutoRegUpsertOne {
	return u.Update(func(s *AutoRegUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AutoRegUpsertOne) UpdateUpdateTime() *AutoRegUpsertOne {
	return u.Update(func(s *AutoRegUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *AutoRegUpsertOne) SetIP(v string) *AutoRegUpsertOne {
	return u.Update(func(s *AutoRegUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AutoRegUpsertOne) UpdateIP() *AutoRegUpsertOne {
	return u.Update(func(s *AutoRegUpsert) {
		s.UpdateIP()
	})
}

// Exec executes the query.
func (u *AutoRegUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AutoRegCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AutoRegUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AutoRegUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AutoRegUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AutoRegCreateBulk is the builder for creating many AutoReg entities in bulk.
type AutoRegCreateBulk struct {
	config
	err      error
	builders []*AutoRegCreate
	conflict []sql.ConflictOption
}

// Save creates the AutoReg entities in the database.
func (arcb *AutoRegCreateBulk) Save(ctx context.Context) ([]*AutoReg, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AutoReg, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AutoRegMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AutoRegCreateBulk) SaveX(ctx context.Context) []*AutoReg {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AutoRegCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AutoRegCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AutoReg.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AutoRegUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (arcb *AutoRegCreateBulk) OnConflict(opts ...sql.ConflictOption) *AutoRegUpsertBulk {
	arcb.conflict = opts
	return &AutoRegUpsertBulk{
		create: arcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arcb *AutoRegCreateBulk) OnConflictColumns(columns ...string) *AutoRegUpsertBulk {
	arcb.conflict = append(arcb.conflict, sql.ConflictColumns(columns...))
	return &AutoRegUpsertBulk{
		create: arcb,
	}
}

// AutoRegUpsertBulk is the builder for "upsert"-ing
// a bulk of AutoReg nodes.
type AutoRegUpsertBulk struct {
	create *AutoRegCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AutoRegUpsertBulk) UpdateNewValues() *AutoRegUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(autoreg.FieldCreateTime)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(autoreg.FieldSn)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AutoReg.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AutoRegUpsertBulk) Ignore() *AutoRegUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AutoRegUpsertBulk) DoNothing() *AutoRegUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AutoRegCreateBulk.OnConflict
// documentation for more info.
func (u *AutoRegUpsertBulk) Update(set func(*AutoRegUpsert)) *AutoRegUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AutoRegUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *AutoRegUpsertBulk) SetUpdateTime(v time.Time) *AutoRegUpsertBulk {
	return u.Update(func(s *AutoRegUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *AutoRegUpsertBulk) UpdateUpdateTime() *AutoRegUpsertBulk {
	return u.Update(func(s *AutoRegUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetIP sets the "ip" field.
func (u *AutoRegUpsertBulk) SetIP(v string) *AutoRegUpsertBulk {
	return u.Update(func(s *AutoRegUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *AutoRegUpsertBulk) UpdateIP() *AutoRegUpsertBulk {
	return u.Update(func(s *AutoRegUpsert) {
		s.UpdateIP()
	})
}

// Exec executes the query.
func (u *AutoRegUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AutoRegCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AutoRegCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AutoRegUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
