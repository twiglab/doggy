package pf

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Channel) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.SN, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SN")
				return
			}
		case "p":
			z.IpAddr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IpAddr")
				return
			}
		case "r":
			z.RegTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "RegTime")
				return
			}
		case "i":
			z.UUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "c":
			z.Code, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Channel) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "s"
	err = en.Append(0x85, 0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.SN)
	if err != nil {
		err = msgp.WrapError(err, "SN")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.IpAddr)
	if err != nil {
		err = msgp.WrapError(err, "IpAddr")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteTime(z.RegTime)
	if err != nil {
		err = msgp.WrapError(err, "RegTime")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteString(z.UUID)
	if err != nil {
		err = msgp.WrapError(err, "UUID")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Channel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "s"
	o = append(o, 0x85, 0xa1, 0x73)
	o = msgp.AppendString(o, z.SN)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendString(o, z.IpAddr)
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendTime(o, z.RegTime)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendString(o, z.UUID)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Code)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Channel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.SN, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SN")
				return
			}
		case "p":
			z.IpAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IpAddr")
				return
			}
		case "r":
			z.RegTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RegTime")
				return
			}
		case "i":
			z.UUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "c":
			z.Code, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Channel) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.SN) + 2 + msgp.StringPrefixSize + len(z.IpAddr) + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.UUID) + 2 + msgp.StringPrefixSize + len(z.Code)
	return
}
